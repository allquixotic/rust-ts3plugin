var searchIndex = {};
searchIndex["ts3plugin"] = {"doc":"A crate to create TeamSpeak3 plugins.","items":[[11,"clone","ts3plugin_sys::clientlib_publicdefinitions","",0,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"eq","","",0,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"connectstatus"}],"output":{"name":"connectstatus"}}],[11,"eq","","",1,{"inputs":[{"name":"connectstatus"},{"name":"connectstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"connectstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","ts3plugin_sys::plugin_definitions","",2,{"inputs":[{"name":"configureoffer"}],"output":{"name":"configureoffer"}}],[11,"eq","","",2,{"inputs":[{"name":"configureoffer"},{"name":"configureoffer"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"configureoffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"messagetarget"}],"output":{"name":"messagetarget"}}],[11,"eq","","",3,{"inputs":[{"name":"messagetarget"},{"name":"messagetarget"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"messagetarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"eq","","",4,{"inputs":[{"name":"itemtype"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"itemtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"menutype"}],"output":{"name":"menutype"}}],[11,"eq","","",5,{"inputs":[{"name":"menutype"},{"name":"menutype"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"menutype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"guiprofile"}],"output":{"name":"guiprofile"}}],[11,"eq","","",6,{"inputs":[{"name":"guiprofile"},{"name":"guiprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"guiprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"connecttab"}],"output":{"name":"connecttab"}}],[11,"eq","","",7,{"inputs":[{"name":"connecttab"},{"name":"connecttab"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"connecttab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","ts3plugin_sys::public_definitions","",8,{"inputs":[{"name":"talkstatus"}],"output":{"name":"talkstatus"}}],[11,"eq","","",8,{"inputs":[{"name":"talkstatus"},{"name":"talkstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"talkstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"codectype"}],"output":{"name":"codectype"}}],[11,"eq","","",9,{"inputs":[{"name":"codectype"},{"name":"codectype"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"codectype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"codecencryptionmode"}],"output":{"name":"codecencryptionmode"}}],[11,"eq","","",10,{"inputs":[{"name":"codecencryptionmode"},{"name":"codecencryptionmode"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"codecencryptionmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"textmessagetargetmode"}],"output":{"name":"textmessagetargetmode"}}],[11,"eq","","",11,{"inputs":[{"name":"textmessagetargetmode"},{"name":"textmessagetargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"textmessagetargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"muteinputstatus"}],"output":{"name":"muteinputstatus"}}],[11,"eq","","",12,{"inputs":[{"name":"muteinputstatus"},{"name":"muteinputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"muteinputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"muteoutputstatus"}],"output":{"name":"muteoutputstatus"}}],[11,"eq","","",13,{"inputs":[{"name":"muteoutputstatus"},{"name":"muteoutputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"muteoutputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"hardwareinputstatus"}],"output":{"name":"hardwareinputstatus"}}],[11,"eq","","",14,{"inputs":[{"name":"hardwareinputstatus"},{"name":"hardwareinputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"hardwareinputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"hardwareoutputstatus"}],"output":{"name":"hardwareoutputstatus"}}],[11,"eq","","",15,{"inputs":[{"name":"hardwareoutputstatus"},{"name":"hardwareoutputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"hardwareoutputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"inputdeactivationstatus"}],"output":{"name":"inputdeactivationstatus"}}],[11,"eq","","",16,{"inputs":[{"name":"inputdeactivationstatus"},{"name":"inputdeactivationstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"inputdeactivationstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"reasonidentifier"}],"output":{"name":"reasonidentifier"}}],[11,"eq","","",17,{"inputs":[{"name":"reasonidentifier"},{"name":"reasonidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"reasonidentifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"channelproperties"}],"output":{"name":"channelproperties"}}],[11,"eq","","",18,{"inputs":[{"name":"channelproperties"},{"name":"channelproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"channelproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"clientproperties"}],"output":{"name":"clientproperties"}}],[11,"eq","","",19,{"inputs":[{"name":"clientproperties"},{"name":"clientproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"clientproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"virtualserverproperties"}],"output":{"name":"virtualserverproperties"}}],[11,"eq","","",20,{"inputs":[{"name":"virtualserverproperties"},{"name":"virtualserverproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"virtualserverproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"connectionproperties"}],"output":{"name":"connectionproperties"}}],[11,"eq","","",21,{"inputs":[{"name":"connectionproperties"},{"name":"connectionproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"connectionproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"logtypes"}],"output":{"name":"logtypes"}}],[11,"eq","","",22,{"inputs":[{"name":"logtypes"},{"name":"logtypes"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"logtypes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"clone","","",24,{"inputs":[{"name":"groupwhispertype"}],"output":{"name":"groupwhispertype"}}],[11,"eq","","",24,{"inputs":[{"name":"groupwhispertype"},{"name":"groupwhispertype"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"groupwhispertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"groupwhispertargetmode"}],"output":{"name":"groupwhispertargetmode"}}],[11,"eq","","",25,{"inputs":[{"name":"groupwhispertargetmode"},{"name":"groupwhispertargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"groupwhispertargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"monosounddestination"}],"output":{"name":"monosounddestination"}}],[11,"eq","","",26,{"inputs":[{"name":"monosounddestination"},{"name":"monosounddestination"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"monosounddestination"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"securitysaltoptions"}],"output":{"name":"securitysaltoptions"}}],[11,"eq","","",27,{"inputs":[{"name":"securitysaltoptions"},{"name":"securitysaltoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"securitysaltoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"clientcommand"}],"output":{"name":"clientcommand"}}],[11,"eq","","",28,{"inputs":[{"name":"clientcommand"},{"name":"clientcommand"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"clientcommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"acltype"}],"output":{"name":"acltype"}}],[11,"eq","","",29,{"inputs":[{"name":"acltype"},{"name":"acltype"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"acltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"groupshownametreemode"}],"output":{"name":"groupshownametreemode"}}],[11,"eq","","",30,{"inputs":[{"name":"groupshownametreemode"},{"name":"groupshownametreemode"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"groupshownametreemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"plugintargetmode"}],"output":{"name":"plugintargetmode"}}],[11,"eq","","",31,{"inputs":[{"name":"plugintargetmode"},{"name":"plugintargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"plugintargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"serverbinding"}],"output":{"name":"serverbinding"}}],[11,"eq","","",32,{"inputs":[{"name":"serverbinding"},{"name":"serverbinding"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"serverbinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"hostmessagemode"}],"output":{"name":"hostmessagemode"}}],[11,"eq","","",33,{"inputs":[{"name":"hostmessagemode"},{"name":"hostmessagemode"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"hostmessagemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"hostbannermode"}],"output":{"name":"hostbannermode"}}],[11,"eq","","",34,{"inputs":[{"name":"hostbannermode"},{"name":"hostbannermode"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"hostbannermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"filetransferstate"}],"output":{"name":"filetransferstate"}}],[11,"eq","","",35,{"inputs":[{"name":"filetransferstate"},{"name":"filetransferstate"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"filetransferstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"filelisttype"}],"output":{"name":"filelisttype"}}],[11,"eq","","",36,{"inputs":[{"name":"filelisttype"},{"name":"filelisttype"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"filelisttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"clienttype"}],"output":{"name":"clienttype"}}],[11,"eq","","",37,{"inputs":[{"name":"clienttype"},{"name":"clienttype"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"clienttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"awaystatus"}],"output":{"name":"awaystatus"}}],[11,"eq","","",38,{"inputs":[{"name":"awaystatus"},{"name":"awaystatus"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"awaystatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"commandlinepropertiesrare"}],"output":{"name":"commandlinepropertiesrare"}}],[11,"eq","","",39,{"inputs":[{"name":"commandlinepropertiesrare"},{"name":"commandlinepropertiesrare"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"commandlinepropertiesrare"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"serverinstancepropertiesrare"}],"output":{"name":"serverinstancepropertiesrare"}}],[11,"eq","","",40,{"inputs":[{"name":"serverinstancepropertiesrare"},{"name":"serverinstancepropertiesrare"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"serverinstancepropertiesrare"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"licenseviolationtype"}],"output":{"name":"licenseviolationtype"}}],[11,"eq","","",41,{"inputs":[{"name":"licenseviolationtype"},{"name":"licenseviolationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"licenseviolationtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","ts3plugin_sys::public_errors","",42,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",42,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Error","ts3plugin","",null,null],[13,"Ok","","General",42,null],[13,"Undefined","","",42,null],[13,"NotImplemented","","",42,null],[13,"OkNoUpdate","","",42,null],[13,"DontNotify","","",42,null],[13,"LibTimeLimitReached","","",42,null],[13,"CommandNotFount","","Dunno",42,null],[13,"UnableToBindNetworkPort","","",42,null],[13,"NoNetworkPortAvailable","","",42,null],[13,"ClientInvalidId","","Client",42,null],[13,"ClientNicknameInuse","","",42,null],[13,"ClientProtocolLimitReached","","",42,null],[13,"ClientInvalidType","","",42,null],[13,"ClientAlreadySubscribed","","",42,null],[13,"ClientNotLoggedIn","","",42,null],[13,"ClientCouldNotValidateIdentity","","",42,null],[13,"ClientInvalidPassword","","",42,null],[13,"ClientTooManyClonesConnected","","",42,null],[13,"ClientVersionOutdated","","",42,null],[13,"ClientIsOnline","","",42,null],[13,"ClientIsFlooding","","",42,null],[13,"ClientHacked","","",42,null],[13,"ClientCannotVerifyNow","","",42,null],[13,"ClientLoginNotPermitted","","",42,null],[13,"ClientNotSubscripted","","",42,null],[13,"ChannelInvalidId","","Channel",42,null],[13,"ChannelProtocolLimitReached","","",42,null],[13,"ChannelAlreadyIn","","",42,null],[13,"ChannelnameInuse","","",42,null],[13,"ChannelNotEmpty","","",42,null],[13,"ChannelCannotDeleteDefault","","",42,null],[13,"ChannelDefaultRequirePermanent","","",42,null],[13,"ChannelInvalidFlags","","",42,null],[13,"ChannelParentNotPermanent","","",42,null],[13,"ChannelMaxclientsReached","","",42,null],[13,"ChannelMaxfamilyReached","","",42,null],[13,"ChannelInvalidOrder","","",42,null],[13,"ChannelNoFiletransferSupported","","",42,null],[13,"ChannelInvalidPassword","","",42,null],[13,"ChannelIsPrivateChannel","","",42,null],[13,"ChannelInvalidSecurityHash","","",42,null],[13,"ServerInvalidId","","Server",42,null],[13,"ServerRunning","","",42,null],[13,"ServerIsShuttingDown","","",42,null],[13,"ServerMaxclientsReached","","",42,null],[13,"ServerInvalidPassword","","",42,null],[13,"ServerDeploymentActive","","",42,null],[13,"ServerUnableToStopOwnServer","","",42,null],[13,"ServerIsVirtual","","",42,null],[13,"ServerWrongMachineid","","",42,null],[13,"ServerIsNotRunning","","",42,null],[13,"ServerIsBooting","","",42,null],[13,"ServerStatusInvalid","","",42,null],[13,"ServerModalQuit","","",42,null],[13,"ServerVersionOutdated","","",42,null],[13,"ServerDuplicatedRunning","","",42,null],[13,"Database","","Database",42,null],[13,"DatabaseEmptyResult","","",42,null],[13,"DatabaseDuplicateEntry","","",42,null],[13,"DatabaseNoModifications","","",42,null],[13,"DatabaseConstraint","","",42,null],[13,"DatabaseReinvoke","","",42,null],[13,"ParameterQuote","","",42,null],[13,"ParameterInvalidCount","","",42,null],[13,"ParameterInvalid","","",42,null],[13,"ParameterNotFount","","",42,null],[13,"ParameterConvert","","",42,null],[13,"ParameterInvalidSize","","",42,null],[13,"ParameterMissing","","",42,null],[13,"ParameterChecksum","","",42,null],[13,"VsCritical","","Unsorted, needs further investigation",42,null],[13,"ConnectionLost","","",42,null],[13,"NotConnected","","",42,null],[13,"NoCachedConnectionInfo","","",42,null],[13,"CurrentlyNotPossible","","",42,null],[13,"FailedConnectionInitialisation","","",42,null],[13,"CouldNotResolveHostname","","",42,null],[13,"InvalidServerConnectionoHandlerId","","",42,null],[13,"CouldNotInitialiseInputManager","","",42,null],[13,"ClientlibraryNotInitialised","","",42,null],[13,"ServerlibraryNotInitialised","","",42,null],[13,"WhisperTooManyTargets","","",42,null],[13,"WhisperNoTargets","","",42,null],[13,"FileInvalidName","","File transfer",42,null],[13,"FileInvalidPermissions","","",42,null],[13,"FileAlreadyExists","","",42,null],[13,"FileNotFound","","",42,null],[13,"FileIoError","","",42,null],[13,"FileInvalidTransferId","","",42,null],[13,"FileInvalidPath","","",42,null],[13,"FileNoFilesAvailable","","",42,null],[13,"FileOverwriteExcludesResume","","",42,null],[13,"FileInvalidSize","","",42,null],[13,"FileAlreadyInUse","","",42,null],[13,"FileCouldNotOpenConnection","","",42,null],[13,"FileNoSpaceLeftOnDevice","","",42,null],[13,"FileExceedsFileSystemMaximumSize","","",42,null],[13,"FileTransferConnectionTimeout","","",42,null],[13,"FileConnectionLost","","",42,null],[13,"FileExceedsSuppliedSize","","",42,null],[13,"FileTransferComplete","","",42,null],[13,"FileTransferCanceled","","",42,null],[13,"FileTransferInterrupted","","",42,null],[13,"FileTransferServerQuotaExceeded","","",42,null],[13,"FileTransferClientQuotaExceeded","","",42,null],[13,"FileTransferReset","","",42,null],[13,"FileTransferLimitReached","","",42,null],[13,"SoundPreprocessorDisabled","","Sound",42,null],[13,"SoundInternalPreprocessor","","",42,null],[13,"SoundInternalEncoder","","",42,null],[13,"SoundInternalPlayback","","",42,null],[13,"SoundNoCaptureDeviceAvailable","","",42,null],[13,"SoundNoPlaybackDeviceAvailable","","",42,null],[13,"SoundCouldNotOpenCaptureDevice","","",42,null],[13,"SoundCouldNotOpenPlaybackDevice","","",42,null],[13,"SoundHandlerHasDevice","","",42,null],[13,"SoundInvalidCaptureDevice","","",42,null],[13,"SoundInvalidPlaybackDevice","","",42,null],[13,"SoundInvalidWave","","",42,null],[13,"SoundUnsupportedWave","","",42,null],[13,"SoundOpenWave","","",42,null],[13,"SoundInternalCapture","","",42,null],[13,"SoundDeviceInUse","","",42,null],[13,"SoundDeviceAlreadyRegisterred","","",42,null],[13,"SoundUnknownDevice","","",42,null],[13,"SoundUnsupportedFrequency","","",42,null],[13,"SoundInvalidChannelCount","","",42,null],[13,"SoundReadWave","","",42,null],[13,"SoundNeedMoreData","","For internal purposes only",42,null],[13,"SoundDeviceBusy","","For internal purposes only",42,null],[13,"SoundNoData","","",42,null],[13,"SoundChannelMaskMismatch","","",42,null],[13,"PermissionsInvalidGroupId","","Permissions",42,null],[13,"PermissionsDuplicateEntry","","",42,null],[13,"PermissionsInvalidPermId","","",42,null],[13,"PermissionsEmptyResult","","",42,null],[13,"PermissionsDefaultGroupForbidden","","",42,null],[13,"PermissionsInvalidSize","","",42,null],[13,"PermissionsInvalidValue","","",42,null],[13,"PermissionsGroupNotEmpty","","",42,null],[13,"PermissionsClientInsufficient","","",42,null],[13,"PermissionsInsufficientGroupPower","","",42,null],[13,"PermissionsInsufficientPermissionPower","","",42,null],[13,"PermissionsTemplateGroupIsUsed","","",42,null],[13,"Permissions","","",42,null],[13,"AccountingVirtualserverLimitReached","","Accounting",42,null],[13,"AccountingSlotLimitReached","","",42,null],[13,"AccountingLicenseFileNotFound","","",42,null],[13,"AccountingLicenseDateNotOk","","",42,null],[13,"AccountingUnableToConnectToServer","","",42,null],[13,"AccountingUnknownError","","",42,null],[13,"AcountingServerError","","",42,null],[13,"AccountingInstanceLimitReached","","",42,null],[13,"AccountingInstanceCheckError","","",42,null],[13,"AccountingLicenseFileInvalid","","",42,null],[13,"AccountingRunningElsewhere","","",42,null],[13,"AccountingInstanceDuplicated","","",42,null],[13,"AccountingAlreadyStarted","","",42,null],[13,"AccountingNotStarted","","",42,null],[13,"AccountingToManyStarts","","",42,null],[13,"MessageInvalidId","","Messages",42,null],[13,"BanInvalidId","","Ban",42,null],[13,"ConnectFailedBanned","","",42,null],[13,"RenameFailedBanned","","",42,null],[13,"BanFlooding","","",42,null],[13,"TtsUnableToInitialize","","Tts",42,null],[13,"PriviledgeKeyInvalid","","",42,null],[13,"VoipPjsua","","Voip",42,null],[13,"VoipAlreadyInitialized","","",42,null],[13,"VoipTooManyAccounts","","",42,null],[13,"VoipInvalidAccount","","",42,null],[13,"VoipInternalError","","",42,null],[13,"VoipInvalidConnectionId","","",42,null],[13,"VoipCannotAnswerInitiatedCall","","",42,null],[13,"VoipNotInitialized","","",42,null],[13,"ProvisioningInvalidPassword","","Provisioning server",42,null],[13,"ProvisioningInvalidRequest","","",42,null],[13,"ProvisioningNoSlotsAvailable","","",42,null],[13,"ProvisioningPoolMissing","","",42,null],[13,"ProvisioningPoolUnkown","","",42,null],[13,"ProvisioningUnknownIpLocation","","",42,null],[13,"ProvisioningInternalTriedExceeded","","",42,null],[13,"ProvisioningTooManySlotsRequested","","",42,null],[13,"ProvisioningTooManyReserved","","",42,null],[13,"ProvisioningCouldNotConnect","","",42,null],[13,"ProvisioningAuthServerNotConnected","","",42,null],[13,"ProvisioningAuthDataTooLarge","","",42,null],[13,"ProvisioningAlreadyInitialized","","",42,null],[13,"ProvisioningNotInitialized","","",42,null],[13,"ProvisioningConnecting","","",42,null],[13,"ProvisioningAlreadyConnected","","",42,null],[13,"ProvisioningNotConnected","","",42,null],[13,"ProvisioningIoError","","",42,null],[13,"ProvisioningInvalidTimeout","","",42,null],[13,"ProvisioningTs3severNotFound","","",42,null],[13,"ProvisioningNoPermission","","",42,null],[3,"Ts3Functions","","Functions exported to plugin from main binary",null,null],[12,"get_client_lib_version","","",43,null],[12,"get_client_lib_version_number","","",43,null],[12,"spawn_new_server_connection_handler","","",43,null],[12,"destroy_server_connection_handler","","",43,null],[12,"get_error_message","","Error handling",43,null],[12,"free_memory","","Memory management",43,null],[12,"log_message","","Logging",43,null],[12,"get_playback_device_list","","Sound",43,null],[12,"get_playback_mode_list","","",43,null],[12,"get_capture_device_list","","",43,null],[12,"get_capture_mode_list","","",43,null],[12,"get_default_playback_device","","",43,null],[12,"get_default_playback_mode","","",43,null],[12,"get_default_capture_device","","",43,null],[12,"get_default_capture_mode","","",43,null],[12,"open_playback_device","","",43,null],[12,"open_capture_device","","",43,null],[12,"get_current_playback_device_name","","",43,null],[12,"get_current_play_back_mode","","",43,null],[12,"get_current_capture_device_name","","",43,null],[12,"get_current_capture_mode","","",43,null],[12,"initiate_graceful_playback_shutdown","","",43,null],[12,"close_playback_device","","",43,null],[12,"close_capture_device","","",43,null],[12,"activate_capture_device","","",43,null],[12,"play_wave_file_handle","","",43,null],[12,"pause_wave_file_handle","","",43,null],[12,"close_wave_file_handle","","",43,null],[12,"play_wave_file","","",43,null],[12,"register_custom_device","","",43,null],[12,"unregister_custom_device","","",43,null],[12,"process_custom_capture_data","","",43,null],[12,"acquire_custom_playback_data","","",43,null],[12,"get_pre_processor_info_value_float","","Preprocessor",43,null],[12,"get_pre_processor_config_value","","",43,null],[12,"set_pre_processor_config_value","","",43,null],[12,"get_encode_config_value","","Encoder",43,null],[12,"get_playback_config_value_as_float","","Playback",43,null],[12,"set_playback_config_value","","",43,null],[12,"set_client_volume_modifier","","",43,null],[12,"start_voice_recording","","Recording",43,null],[12,"stop_voice_recording","","",43,null],[12,"systemset3d_listener_attributes","","3D sound positioning",43,null],[12,"set3d_wave_attributes","","",43,null],[12,"systemset3d_settings","","",43,null],[12,"channelset3d_attributes","","",43,null],[12,"start_connection","","Interaction with the server",43,null],[12,"stop_connection","","",43,null],[12,"request_client_move","","",43,null],[12,"request_client_variables","","",43,null],[12,"request_client_kick_from_channel","","",43,null],[12,"request_client_kick_from_server","","",43,null],[12,"request_channel_delete","","",43,null],[12,"request_channel_move","","",43,null],[12,"request_send_private_text_msg","","",43,null],[12,"request_send_channel_text_msg","","",43,null],[12,"request_send_server_text_msg","","",43,null],[12,"request_connection_info","","",43,null],[12,"request_client_set_whisper_list","","",43,null],[12,"request_channel_subscribe","","",43,null],[12,"request_channel_subscribe_all","","",43,null],[12,"request_channel_unsubscribe","","",43,null],[12,"request_channel_unsubscribe_all","","",43,null],[12,"request_channel_description","","",43,null],[12,"request_mute_clients","","",43,null],[12,"requset_unmute_clients","","",43,null],[12,"request_client_poke","","",43,null],[12,"request_client_ids","","",43,null],[12,"client_chat_closed","","",43,null],[12,"client_chat_composing","","",43,null],[12,"request_server_temporary_password_add","","",43,null],[12,"request_server_temporary_password_del","","",43,null],[12,"request_server_temporary_password_list","","",43,null],[12,"get_client_id","","Access clientlib information\nQuery own client id",43,null],[12,"get_client_self_variable_as_int","","Client info",43,null],[12,"get_client_self_variable_as_string","","",43,null],[12,"set_client_self_variable_as_int","","",43,null],[12,"set_client_self_variable_as_string","","",43,null],[12,"flush_client_self_updates","","",43,null],[12,"get_client_variable_as_int","","",43,null],[12,"get_client_variable_as_uint64","","",43,null],[12,"get_client_variable_as_string","","",43,null],[12,"get_client_list","","",43,null],[12,"get_channel_of_client","","",43,null],[12,"get_channel_variable_as_int","","Channel info",43,null],[12,"get_channel_variable_as_uint64","","",43,null],[12,"get_channel_variable_as_string","","",43,null],[12,"get_channel_id_from_channel_names","","",43,null],[12,"set_channel_variable_as_int","","",43,null],[12,"set_channel_variable_as_uint64","","",43,null],[12,"set_channel_variable_as_string","","",43,null],[12,"flush_channel_updates","","",43,null],[12,"flush_channel_creation","","",43,null],[12,"get_channel_list","","",43,null],[12,"get_channel_client_list","","",43,null],[12,"get_parent_channel_of_channel","","",43,null],[12,"get_server_connection_handler_list","","Server info",43,null],[12,"get_server_variable_as_int","","",43,null],[12,"get_server_variable_as_uint64","","",43,null],[12,"get_server_variable_as_string","","",43,null],[12,"request_server_variables","","",43,null],[12,"get_connection_status","","Connection info",43,null],[12,"get_connection_variable_as_uint64","","",43,null],[12,"get_connection_variable_as_double","","",43,null],[12,"get_connection_variable_as_string","","",43,null],[12,"clean_up_connection_info","","",43,null],[12,"request_client_dbid_from_uid","","Client related",43,null],[12,"request_client_name_from_uid","","",43,null],[12,"request_client_name_from_dbid","","",43,null],[12,"request_client_edit_description","","",43,null],[12,"request_client_set_is_talker","","",43,null],[12,"request_is_talker","","",43,null],[12,"request_send_client_query_command","","Plugin related",43,null],[12,"get_transfer_file_name","","Filetransfer",43,null],[12,"get_transfer_file_path","","",43,null],[12,"get_transfer_file_size","","",43,null],[12,"get_transfer_file_size_done","","",43,null],[12,"is_transfer_sender","","1 == upload, 0 == download",43,null],[12,"get_transfer_status","","",43,null],[12,"get_current_transfer_speed","","",43,null],[12,"get_average_transfer_speed","","",43,null],[12,"get_transfer_run_time","","",43,null],[12,"send_file","","",43,null],[12,"request_file","","",43,null],[12,"halt_transfer","","",43,null],[12,"request_file_list","","",43,null],[12,"request_file_info","","",43,null],[12,"request_delete_file","","",43,null],[12,"request_create_directory","","",43,null],[12,"requset_rename_file","","",43,null],[12,"request_message_add","","Offline message management",43,null],[12,"request_message_del","","",43,null],[12,"request_message_get","","",43,null],[12,"request_message_list","","",43,null],[12,"request_message_update_flag","","",43,null],[12,"verify_server_password","","Interacting with the server - confirming passwords",43,null],[12,"verify_channel_password","","",43,null],[12,"banclient","","Interacting with the server - banning",43,null],[12,"banadd","","",43,null],[12,"banclient_dbid","","",43,null],[12,"bandel","","",43,null],[12,"bandelall","","",43,null],[12,"request_ban_list","","",43,null],[12,"request_complain_add","","Interacting with the server - complain",43,null],[12,"request_complain_del","","",43,null],[12,"request_complain_del_all","","",43,null],[12,"request_complain_list","","",43,null],[12,"request_server_group_list","","Permissions",43,null],[12,"request_server_group_add","","",43,null],[12,"request_server_group_del","","",43,null],[12,"request_server_group_add_client","","",43,null],[12,"request_server_group_del_client","","",43,null],[12,"request_server_groups_by_client_id","","",43,null],[12,"request_server_group_add_perm","","",43,null],[12,"request_server_group_del_perm","","",43,null],[12,"request_server_group_perm_list","","",43,null],[12,"request_server_group_client_list","","",43,null],[12,"request_channel_group_list","","",43,null],[12,"request_channel_group_add","","",43,null],[12,"request_channel_group_del","","",43,null],[12,"request_channel_group_add_perm","","",43,null],[12,"request_channel_group_del_perm","","",43,null],[12,"request_channel_group_perm_list","","",43,null],[12,"request_set_client_channel_group","","",43,null],[12,"request_channel_add_perm","","",43,null],[12,"request_channel_del_perm","","",43,null],[12,"request_channel_perm_list","","",43,null],[12,"request_client_add_perm","","",43,null],[12,"request_client_del_perm","","",43,null],[12,"request_client_perm_list","","",43,null],[12,"request_channel_client_add_perm","","",43,null],[12,"request_channel_client_del_perm","","",43,null],[12,"request_channel_client_perm_list","","",43,null],[12,"priviledge_key_use","","",43,null],[12,"request_permission_list","","",43,null],[12,"request_permission_overview","","",43,null],[12,"client_property_string_to_flag","","Helper functions",43,null],[12,"channel_property_string_to_flag","","",43,null],[12,"server_property_string_to_flag","","",43,null],[12,"get_app_path","","Client functions",43,null],[12,"get_resources_path","","",43,null],[12,"get_config_path","","",43,null],[12,"get_plugin_path","","",43,null],[12,"get_current_server_connection_handler_id","","",43,null],[12,"print_message","","",43,null],[12,"print_message_to_current_tab","","",43,null],[12,"urls_to_bb","","",43,null],[12,"send_plugin_command","","",43,null],[12,"get_directories","","",43,null],[12,"get_server_connect_info","","",43,null],[12,"get_channel_connection_info","","",43,null],[12,"create_return_code","","",43,null],[12,"request_info_update","","",43,null],[12,"get_server_version","","",43,null],[12,"is_whispering","","",43,null],[12,"is_receiving_whisper","","",43,null],[12,"get_avatar","","",43,null],[12,"set_plugin_menu_enabled","","",43,null],[12,"show_hotkey_setup","","",43,null],[12,"request_hotkey_input_dialog","","",43,null],[12,"get_hotkey_from_keyword","","",43,null],[12,"get_client_display_name","","",43,null],[12,"get_bookmark_list","","",43,null],[12,"get_profile_list","","",43,null],[12,"gui_connect","","",43,null],[12,"gui_connect_bookmark","","",43,null],[12,"create_bookmark","","",43,null],[12,"get_permission_id_by_name","","",43,null],[12,"get_client_needed_permission","","",43,null],[3,"OptionalServerData","","Server properties that have to be fetched explicitely",null,null],[3,"OutdatedServerData","","Server properties that are available at the start but not updated",null,null],[3,"Server","","",null,null],[3,"OptionalChannelData","","Channel properties that have to be fetched explicitely",null,null],[3,"Channel","","",null,null],[3,"OwnConnectionData","","",null,null],[3,"ServerqueryConnectionData","","",null,null],[3,"OptionalConnectionData","","",null,null],[3,"Connection","","",null,null],[3,"TsApi","","",null,null],[3,"Invoker","","A struct for convenience. The invoker is maybe not visible to the user,\nbut we can get events caused by him, so some information about him\nare passed along with his id.",null,null],[3,"Permissions","","",null,null],[3,"ServerId","","",null,null],[3,"ChannelId","","",null,null],[3,"ConnectionId","","",null,null],[3,"PermissionId","","",null,null],[3,"ServerGroupId","","",null,null],[3,"ChannelGroupId","","",null,null],[4,"MessageReceiver","","",null,null],[13,"Connection","","",44,null],[13,"Channel","","",44,null],[13,"Server","","",44,null],[0,"ts3interface","","",null,null],[0,"plugin","","",null,null],[4,"InitError","ts3plugin::plugin","",null,null],[13,"Failure","","Initialisation failed, the plugin will be unloaded again",45,null],[13,"FailureNoMessage","","Like `Failure`, but the client will not show a &quot;failed to load&quot; warning.\nThis is a very special case and should only be used if a plugin displays\na dialog (e.g. overlay) asking the user to disable the plugin again,\navoiding the show another dialog by the client telling the user the\nplugin failed to load.\nFor normal case, if a plugin really failed to load because of an error,\nthe correct return value is `Failure`.",45,null],[8,"Plugin","","The trait that has to be implemented by a plugin. To enhance a library to a\nworking TeamSpeak plugin you have to call the macro `create_plugin!`\nafterwards.",null,null],[10,"new","","",46,{"inputs":[{"name":"tsapi"}],"output":{"name":"result"}}],[11,"connect_status_change","","If the connection status changes.\nIf `status = ConnectStatus::Connecting`, the connection_id is not yet\nregistered in the `TsApi`.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectstatus"},{"name":"error"}],"output":null}],[11,"server_stop","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"string"}],"output":null}],[11,"server_error","","Return `false` if the TeamSpeak client should handle the error normally or\n`true` if the client should ignore the error.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"error"},{"name":"string"},{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"server_edited","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"invoker"}],"output":null}],[11,"server_connection_info","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"}],"output":null}],[11,"connection_info","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"}],"output":null}],[11,"connection_updated","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"option"},{"name":"invoker"}],"output":null}],[11,"connection_announced","","If the plugin was informed about a new connection. If appeared is true, the connection\nwas previously not known to the plugin, if appeared is false, the connection left\nthe view of connection.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"bool"}],"output":null}],[11,"connection_changed","","Called, if a connection connects to the server. This is also called for our own\nconnection.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"bool"},{"name":"string"}],"output":null}],[11,"connection_moved","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"channelid"},{"name":"channelid"},{"name":"visibility"}],"output":null}],[11,"connection_timeout","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"}],"output":null}],[11,"channel_announced","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"}],"output":null}],[11,"channel_description_updated","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"}],"output":null}],[11,"channel_updated","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"},{"name":"option"}],"output":null}],[11,"channel_created","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"},{"name":"invoker"}],"output":null}],[11,"channel_deleted","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"},{"name":"invoker"}],"output":null}],[11,"channel_edited","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"},{"name":"option"},{"name":"invoker"}],"output":null}],[11,"channel_password_updated","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"}],"output":null}],[11,"channel_moved","","The current parent id of the channel is the old one, the new\nparent id is given as a parameter.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"channelid"},{"name":"channelid"},{"name":"invoker"}],"output":null}],[11,"message","","A message was received. `ignored` describes, if the friend and fool system\nof TeamSpeak ignored the message.\nReturn `false` if the TeamSpeak client should handle the message normally or\n`true` if the client should ignore the message.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"invoker"},{"name":"messagereceiver"},{"name":"string"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"poke","","A user poked us. `ignored` describes, if the friend and fool system\nof TeamSpeak ignored the message.\nReturn `false` if the TeamSpeak client should handle the poke normally or\n`true` if the client should ignore the poke.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"invoker"},{"name":"string"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"channel_kick","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"channelid"},{"name":"channelid"},{"name":"visibility"},{"name":"invoker"},{"name":"string"}],"output":null}],[11,"server_kick","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"invoker"},{"name":"string"}],"output":null}],[11,"server_ban","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"invoker"},{"name":"string"},{"name":"u64"}],"output":null}],[11,"talking_changed","","The old values of `talking` and `whispering` are available from the connection.\nThey will be updated after this functions returned.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"talkstatus"},{"name":"bool"}],"output":null}],[11,"avatar_changed","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"option"}],"output":null}],[11,"connection_channel_group_changed","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"connectionid"},{"name":"channelgroupid"},{"name":"channelid"},{"name":"invoker"}],"output":null}],[11,"connection_server_group_added","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"invoker"},{"name":"servergroupid"},{"name":"invoker"}],"output":null}],[11,"connection_server_group_removed","","",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"invoker"},{"name":"servergroupid"},{"name":"invoker"}],"output":null}],[11,"permission_error","","Return `false` if the TeamSpeak client should handle the error normally or\n`true` if the client should ignore the error.",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"},{"name":"serverid"},{"name":"permissionid"},{"name":"error"},{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"shutdown","","Called if the plugin is disabled (either by the user or if TeamSpeak is\nexiting).",46,{"inputs":[{"name":"plugin"},{"name":"tsapi"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"initerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_welcome_message","ts3plugin","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"string"}}],[11,"get_max_clients","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_clients_online","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_channels_online","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_client_connections","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_query_client_connections","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_query_clients_online","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_uptime","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"duration"}}],[11,"get_password","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_max_download_total_bandwith","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_max_upload_total_bandwith","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_download_quota","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_upload_quota","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_month_bytes_downloaded","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_month_bytes_uploaded","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_bytes_downloaded","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_bytes_uploaded","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_complain_autoban_count","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_complain_autoban_time","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"duration"}}],[11,"get_complain_remove_time","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"duration"}}],[11,"get_min_clients_in_channel_before_forced_silence","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_antiflood_points_tick_reduce","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_antiflood_points_needed_command_block","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_antiflood_points_needed_ip_block","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_port","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_autostart","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_machine_id","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_needed_identity_security_level","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_log_client","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_log_query","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_log_channel","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_log_permissions","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_log_server","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_log_filetransfer","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_min_client_version","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"string"}}],[11,"get_total_packetloss_speech","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_packetloss_keepalive","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_packetloss_control","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_packetloss_total","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_total_ping","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"i32"}}],[11,"get_weblist_enabled","","",47,{"inputs":[{"name":"optionalserverdata"}],"output":{"name":"bool"}}],[11,"get_hostmessage","","",48,{"inputs":[{"name":"outdatedserverdata"}],"output":{"name":"string"}}],[11,"get_hostmessage_mode","","",48,{"inputs":[{"name":"outdatedserverdata"}],"output":{"name":"hostmessagemode"}}],[11,"get_id","","",49,{"inputs":[{"name":"server"}],"output":{"name":"serverid"}}],[11,"get_uid","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_own_connection_id","","",49,{"inputs":[{"name":"server"}],"output":{"name":"connectionid"}}],[11,"get_name","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_phonetic_name","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_platform","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_version","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_created","","",49,{"inputs":[{"name":"server"}],"output":{"name":"datetime"}}],[11,"get_codec_encryption_mode","","",49,{"inputs":[{"name":"server"}],"output":{"name":"codecencryptionmode"}}],[11,"get_default_server_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_mut_default_server_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_default_channel_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_mut_default_channel_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_default_channel_admin_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_mut_default_channel_admin_group","","",49,{"inputs":[{"name":"server"}],"output":{"name":"permissions"}}],[11,"get_hostbanner_url","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_hostbanner_gfx_url","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_hostbanner_gfx_interval","","",49,{"inputs":[{"name":"server"}],"output":{"name":"duration"}}],[11,"get_hostbanner_mode","","",49,{"inputs":[{"name":"server"}],"output":{"name":"hostbannermode"}}],[11,"get_priority_speaker_dimm_modificator","","",49,{"inputs":[{"name":"server"}],"output":{"name":"i32"}}],[11,"get_hostbutton_tooltip","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_hostbutton_url","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_hostbutton_gfx_url","","",49,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"get_icon_id","","",49,{"inputs":[{"name":"server"}],"output":{"name":"i32"}}],[11,"get_reserved_slots","","",49,{"inputs":[{"name":"server"}],"output":{"name":"i32"}}],[11,"get_ask_for_privilegekey","","",49,{"inputs":[{"name":"server"}],"output":{"name":"bool"}}],[11,"get_channel_temp_delete_delay_default","","",49,{"inputs":[{"name":"server"}],"output":{"name":"duration"}}],[11,"get_channel_id","","",50,{"inputs":[{"name":"optionalchanneldata"}],"output":{"name":"channelid"}}],[11,"get_server_id","","",50,{"inputs":[{"name":"optionalchanneldata"}],"output":{"name":"serverid"}}],[11,"get_description","","",50,{"inputs":[{"name":"optionalchanneldata"}],"output":{"name":"string"}}],[11,"get_id","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"channelid"}}],[11,"get_server_id","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"serverid"}}],[11,"get_parent_channel_id","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"channelid"}}],[11,"get_name","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"string"}}],[11,"get_topic","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"string"}}],[11,"get_codec","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"codectype"}}],[11,"get_codec_quality","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_max_clients","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_max_family_clients","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_order","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_permanent","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_semi_permanent","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_default","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_password","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_codec_latency_factor","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_codec_is_unencrypted","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_delete_delay","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_max_clients_unlimited","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_max_family_clients_unlimited","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_subscribed","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_needed_talk_power","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_forced_silence","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_phonetic_name","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"string"}}],[11,"get_icon_id","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"i32"}}],[11,"get_private","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"bool"}}],[11,"get_optional_data","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"option"}}],[11,"get_mut_optional_data","","",51,{"inputs":[{"name":"channel"}],"output":{"name":"option"}}],[11,"get_server_ip","","",52,{"inputs":[{"name":"ownconnectiondata"}],"output":{"name":"string"}}],[11,"get_server_port","","",52,{"inputs":[{"name":"ownconnectiondata"}],"output":{"name":"u16"}}],[11,"get_input_deactivated","","",52,{"inputs":[{"name":"ownconnectiondata"}],"output":{"name":"inputdeactivationstatus"}}],[11,"get_default_channel","","",52,{"inputs":[{"name":"ownconnectiondata"}],"output":{"name":"channelid"}}],[11,"get_default_token","","",52,{"inputs":[{"name":"ownconnectiondata"}],"output":{"name":"string"}}],[11,"get_name","","",53,{"inputs":[{"name":"serverqueryconnectiondata"}],"output":{"name":"string"}}],[11,"get_password","","",53,{"inputs":[{"name":"serverqueryconnectiondata"}],"output":{"name":"string"}}],[11,"get_version","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_platform","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_created","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"datetime"}}],[11,"get_last_connected","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"datetime"}}],[11,"get_total_connection","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_ping","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"duration"}}],[11,"get_ping_deviation","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"duration"}}],[11,"get_connected_time","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"duration"}}],[11,"get_idle_time","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"duration"}}],[11,"get_client_ip","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_client_port","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u16"}}],[11,"get_packets_sent_speech","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_sent_keepalive","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_sent_control","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_sent_total","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_sent_speech","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_sent_keepalive","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_sent_control","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_sent_total","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_received_speech","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_received_keepalive","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_received_control","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packets_received_total","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_received_speech","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_received_keepalive","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_received_control","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_bytes_received_total","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packetloss_speech","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packetloss_keepalive","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packetloss_control","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_packetloss_total","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"u64"}}],[11,"get_month_bytes_uploaded","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_month_bytes_downloaded","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_total_bytes_uploaded","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_total_bytes_downloaded","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_default_channel_password","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_server_password","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_is_muted","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_volume_modificator","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_version_sign","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_avatar","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_description","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_talker","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_priority_speaker","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_unread_messages","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_needed_serverquery_view_power","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_icon_id","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"i32"}}],[11,"get_is_channel_commander","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"bool"}}],[11,"get_country","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_badges","","",54,{"inputs":[{"name":"optionalconnectiondata"}],"output":{"name":"string"}}],[11,"get_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"connectionid"}}],[11,"get_server_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"serverid"}}],[11,"get_channel_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"channelid"}}],[11,"get_uid","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"string"}}],[11,"get_name","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"string"}}],[11,"get_talking","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"talkstatus"}}],[11,"get_whispering","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"bool"}}],[11,"get_away","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"awaystatus"}}],[11,"get_away_message","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"string"}}],[11,"get_input_muted","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"muteinputstatus"}}],[11,"get_output_muted","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"muteoutputstatus"}}],[11,"get_output_only_muted","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"muteoutputstatus"}}],[11,"get_input_hardware","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"hardwareinputstatus"}}],[11,"get_output_hardware","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"hardwareoutputstatus"}}],[11,"get_phonetic_name","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"string"}}],[11,"get_recording","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"bool"}}],[11,"get_database_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_database_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_channel_group_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_channel_group_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_server_groups","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_server_groups","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_talk_power","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_talk_power","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_talk_request","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_talk_request","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_talk_request_message","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_talk_request_message","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_channel_group_inherited_channel_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_channel_group_inherited_channel_id","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_own_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_own_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_serverquery_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_serverquery_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_optional_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"get_mut_optional_data","","",55,{"inputs":[{"name":"connection"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"serverid"}],"output":{"name":"serverid"}}],[11,"cmp","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"serverid"},{"name":"serverid"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"serverid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"channelid"}],"output":{"name":"channelid"}}],[11,"cmp","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"channelid"},{"name":"channelid"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"channelid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"connectionid"}],"output":{"name":"connectionid"}}],[11,"cmp","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"connectionid"},{"name":"connectionid"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"connectionid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"permissionid"}],"output":{"name":"permissionid"}}],[11,"cmp","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"permissionid"},{"name":"permissionid"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"permissionid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"servergroupid"}],"output":{"name":"servergroupid"}}],[11,"cmp","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"servergroupid"},{"name":"servergroupid"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"servergroupid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"channelgroupid"}],"output":{"name":"channelgroupid"}}],[11,"cmp","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"channelgroupid"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"channelgroupid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"invoker"},{"name":"invoker"}],"output":{"name":"bool"}}],[11,"get_id","","",62,{"inputs":[{"name":"invoker"}],"output":{"name":"connectionid"}}],[11,"get_uid","","",62,{"inputs":[{"name":"invoker"}],"output":{"name":"string"}}],[11,"get_name","","",62,{"inputs":[{"name":"invoker"}],"output":{"name":"string"}}],[11,"eq","","",49,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"get_connection","","",49,{"inputs":[{"name":"server"},{"name":"connectionid"}],"output":{"name":"option"}}],[11,"get_mut_connection","","",49,{"inputs":[{"name":"server"},{"name":"connectionid"}],"output":{"name":"option"}}],[11,"get_channel","","",49,{"inputs":[{"name":"server"},{"name":"channelid"}],"output":{"name":"option"}}],[11,"get_mut_channel","","",49,{"inputs":[{"name":"server"},{"name":"channelid"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"tsapi"}}],[11,"new","","Create a new TsApi instance without loading anything.\nThis will be called from the `create_plugin!` macro.\nThis function is not meant for public use.",63,{"inputs":[],"output":{"name":"tsapi"}}],[11,"load","","Load all currently connected server and there data.\nThis should normally be executed after `new()`\nThis will be called from the `create_plugin!` macro.\nThis function is not meant for public use.",63,{"inputs":[{"name":"tsapi"}],"output":{"name":"result"}}],[11,"static_log_message","","Please try to use the member method `log_message` instead of this static method.",63,{"inputs":[{"name":"s1"},{"name":"s2"},{"name":"loglevel"}],"output":{"name":"result"}}],[11,"static_log_or_print","","Please try to use the member method `log_or_print` instead of this static method.",63,{"inputs":[{"name":"s1"},{"name":"s2"},{"name":"loglevel"}],"output":null}],[11,"static_get_error_message","","Please try to use the member method `get_error_message` instead of this static method.",63,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"log_message","","Log a message using the TeamSpeak logging API.",63,{"inputs":[{"name":"tsapi"},{"name":"s1"},{"name":"s2"},{"name":"loglevel"}],"output":{"name":"result"}}],[11,"log_or_print","","Log a message using the TeamSpeak logging API.\nIf that fails, print the message.",63,{"inputs":[{"name":"tsapi"},{"name":"s1"},{"name":"s2"},{"name":"loglevel"}],"output":null}],[11,"get_server","","",63,{"inputs":[{"name":"tsapi"},{"name":"serverid"}],"output":{"name":"option"}}],[11,"get_mut_server","","",63,{"inputs":[{"name":"tsapi"},{"name":"serverid"}],"output":{"name":"option"}}],[14,"create_plugin!","","Create a plugin. This macro has to be called once per library to create the\nfunction interface that is used by TeamSpeak.",null,null]],"paths":[[4,"Visibility"],[4,"ConnectStatus"],[4,"ConfigureOffer"],[4,"MessageTarget"],[4,"ItemType"],[4,"MenuType"],[4,"GuiProfile"],[4,"ConnectTab"],[4,"TalkStatus"],[4,"CodecType"],[4,"CodecEncryptionMode"],[4,"TextMessageTargetMode"],[4,"MuteInputStatus"],[4,"MuteOutputStatus"],[4,"HardwareInputStatus"],[4,"HardwareOutputStatus"],[4,"InputDeactivationStatus"],[4,"ReasonIdentifier"],[4,"ChannelProperties"],[4,"ClientProperties"],[4,"VirtualServerProperties"],[4,"ConnectionProperties"],[4,"LogTypes"],[4,"LogLevel"],[4,"GroupWhisperType"],[4,"GroupWhisperTargetMode"],[4,"MonoSoundDestination"],[4,"SecuritySaltOptions"],[4,"ClientCommand"],[4,"ACLType"],[4,"GroupShowNameTreeMode"],[4,"PluginTargetMode"],[4,"ServerBinding"],[4,"HostmessageMode"],[4,"HostbannerMode"],[4,"FileTransferState"],[4,"FileListType"],[4,"ClientType"],[4,"AwayStatus"],[4,"CommandLinePropertiesRare"],[4,"ServerInstancePropertiesRare"],[4,"LicenseViolationType"],[4,"Error"],[3,"Ts3Functions"],[4,"MessageReceiver"],[4,"InitError"],[8,"Plugin"],[3,"OptionalServerData"],[3,"OutdatedServerData"],[3,"Server"],[3,"OptionalChannelData"],[3,"Channel"],[3,"OwnConnectionData"],[3,"ServerqueryConnectionData"],[3,"OptionalConnectionData"],[3,"Connection"],[3,"ServerId"],[3,"ChannelId"],[3,"ConnectionId"],[3,"PermissionId"],[3,"ServerGroupId"],[3,"ChannelGroupId"],[3,"Invoker"],[3,"TsApi"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.22","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","time","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","time","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",3,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",4,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",5,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",5,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",6,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",6,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",6,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",7,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",8,null],[13,"Tue","","Tuesday.",8,null],[13,"Wed","","Wednesday.",8,null],[13,"Thu","","Thursday.",8,null],[13,"Fri","","Friday.",8,null],[13,"Sat","","Saturday.",8,null],[13,"Sun","","Sunday.",8,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",9,null],[13,"Single","","Given local time representation has a single unique result.",9,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",9,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",10,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",10,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",10,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",10,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",10,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"duration"}}],[11,"fmt","","",10,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"duration"}}],[11,"fmt","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",12,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",12,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",12,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",13,{"inputs":[{"name":"offset"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",14,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",14,{"inputs":[{"name":"timezone"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",14,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"offset"}}],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"offset"}}],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"localresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"localresult"}],"output":{"name":"localresult"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",9,{"inputs":[{"name":"localresult"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",9,{"inputs":[{"name":"localresult"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"cmp","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",15,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the prior date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",15,{"inputs":[{"name":"naivedate"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"naivedate"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"i32"}}],[11,"month","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"month0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal0","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"weekday","","",15,{"inputs":[{"name":"naivedate"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",15,null],[11,"with_year","","",15,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",15,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",15,{"inputs":[{"name":"naivedate"},{"name":"h"}],"output":null}],[11,"add","","",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",15,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",15,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",15,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"naivetime"}}],[11,"cmp","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,{"inputs":[{"name":"naivetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"naivetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"minute","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"second","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",16,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","",16,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"hash","","",16,{"inputs":[{"name":"naivetime"},{"name":"h"}],"output":null}],[11,"add","","",16,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",16,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",16,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedatetime"}}],[11,"cmp","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",17,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",17,{"inputs":[{"name":"naivedatetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"naivedatetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i32"}}],[11,"month","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"month0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"weekday","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",17,null],[11,"with_year","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"minute","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"second","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",17,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"h"}],"output":null}],[11,"add","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",18,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",18,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",18,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",18,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",18,{"inputs":[{"name":"date"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",18,{"inputs":[{"name":"date"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",18,{"inputs":[{"name":"date"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",18,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",18,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",18,{"inputs":[{"name":"date"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",18,{"inputs":[{"name":"date"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",18,{"inputs":[{"name":"date"}],"output":{"name":"i32"}}],[11,"month","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"month0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal0","","",18,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"weekday","","",18,{"inputs":[{"name":"date"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,{"inputs":[{"name":"date"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",18,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",18,{"inputs":[{"name":"date"},{"name":"h"}],"output":null}],[11,"add","","",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",18,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",18,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",18,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",19,{"inputs":[{"name":"datetime"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",19,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",19,{"inputs":[{"name":"datetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"i32"}}],[11,"month","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"month0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"weekday","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,{"inputs":[{"name":"datetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"minute","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"second","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",19,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",19,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",19,{"inputs":[{"name":"datetime"},{"name":"h"}],"output":null}],[11,"add","","",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",19,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",19,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",19,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",20,null],[13,"Zero","","Zero (`0`) padding.",20,null],[13,"Space","","Space padding.",20,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",21,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",21,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"Month","","Month (FW=PW=2).",21,null],[13,"Day","","Day of the month (FW=PW=2).",21,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",21,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",21,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",21,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",21,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",21,null],[13,"Ordinal","","Day of the year (FW=PW=3).",21,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",21,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",21,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",21,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",21,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",21,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",21,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",22,null],[13,"LongMonthName","","Full month names.",22,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",22,null],[13,"LongWeekdayName","","Full day of the week names.",22,null],[13,"LowerAmPm","","AM/PM.",22,null],[13,"UpperAmPm","","AM/PM.",22,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",22,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",22,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",22,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",22,null],[13,"TimezoneName","","Timezone name.",22,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",22,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",22,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",22,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",22,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",22,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",22,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",23,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",23,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",23,null],[13,"Fixed","","Fixed-format item.",23,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",23,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",24,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",24,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"month","","Month (1--12).",24,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",24,null],[12,"weekday","","Day of the week.",24,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",24,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",24,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",24,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",24,null],[12,"minute","","Minute number (0--59).",24,null],[12,"second","","Second number (0--60, accounting for leap seconds).",24,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",24,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",24,null],[12,"offset","","Offset from the local time to UTC, in seconds.",24,null],[11,"fmt","","",24,{"inputs":[{"name":"parsed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",24,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",24,{"inputs":[{"name":"parsed"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",24,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",24,{"inputs":[{"name":"parsed"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",24,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",24,{"inputs":[{"name":"parsed"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",25,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",25,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",25,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",20,{"inputs":[{"name":"pad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pad"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"pad"}],"output":{"name":"pad"}}],[11,"fmt","","",21,{"inputs":[{"name":"numeric"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"numeric"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"numeric"}],"output":{"name":"numeric"}}],[11,"fmt","","",22,{"inputs":[{"name":"fixed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"fixed"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"fixed"}],"output":{"name":"fixed"}}],[11,"fmt","","",23,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"eq","","",26,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",26,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",27,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",27,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",28,null],[10,"month","","Returns the month number starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",28,null],[10,"with_year","","Makes a new value with the year number changed.",28,{"inputs":[{"name":"datelike"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",28,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",28,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",29,null],[10,"minute","","Returns the minute number from 0 to 59.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",29,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",29,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"fmt","","",8,{"inputs":[{"name":"weekday"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"eq","","",8,{"inputs":[{"name":"weekday"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"succ","","The next day in the week.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",8,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",6,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",18,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",18,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",19,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",20,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",21,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",6,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",2,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",6,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",6,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["ts3plugin_sys"] = {"doc":"The low-level rust bindings of the TeamSpeak3 plugin API.\nThe original SDK and documentation can be downloaded from\nthe [TeamSpeak website](http://www.teamspeak.com/?page=downloads).","items":[[0,"clientlib_publicdefinitions","ts3plugin_sys","This file contains the definitions of clientlib_publicdefinitions.h",null,null],[4,"Visibility","ts3plugin_sys::clientlib_publicdefinitions","",null,null],[13,"Enter","","",0,null],[13,"Retain","","",0,null],[13,"Leave","","",0,null],[4,"ConnectStatus","","",null,null],[13,"Disconnected","","There is no activity to the server, this is the default value",1,null],[13,"Connecting","","We are trying to connect, we haven&#39;t got a clientID yet, we haven&#39;t been accepted by the server",1,null],[13,"Connected","","The server has accepted us, we can talk and hear and we got a clientID, but we don&#39;t have the channels and clients yet, we can get server infos (welcome msg etc.)",1,null],[13,"ConnectionEstablishing","","We are CONNECTED and we are visible",1,null],[13,"ConnectionEstablished","","We are CONNECTED and we have the client and channels available",1,null],[11,"clone","","",0,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"eq","","",0,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"connectstatus"}],"output":{"name":"connectstatus"}}],[11,"eq","","",1,{"inputs":[{"name":"connectstatus"},{"name":"connectstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"connectstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"plugin_definitions","ts3plugin_sys","This file contains the definitions of plugin_definitions.h",null,null],[3,"MenuItem","ts3plugin_sys::plugin_definitions","",null,null],[12,"type_name","","",2,null],[12,"id","","",2,null],[12,"text","","",2,null],[12,"icon","","",2,null],[3,"Hotkey","","",null,null],[12,"keyword","","",3,null],[12,"description","","",3,null],[3,"BookmarkItem","","",null,null],[12,"name","","",4,null],[12,"is_folder","","",4,null],[12,"reserved","","",4,null],[12,"uuid_folder","","Is either &quot;char *uuid&quot; or &quot;BookmarkList *folder&quot;",4,null],[3,"BookmarkList","","",null,null],[12,"itemcount","","",5,null],[12,"items","","Should be 0 but compiler complains (the C compiler, not the rust compiler)",5,null],[4,"ConfigureOffer","","Return values for offersConfigure",null,null],[13,"No","","Plugin does not implement ts3plugin_configure",6,null],[13,"NewThread","","Plugin does implement ts3plugin_configure and requests to run this function in an own thread",6,null],[13,"QtThread","","Plugin does implement ts3plugin_configure and requests to run this function in the Qt GUI thread",6,null],[4,"MessageTarget","","",null,null],[13,"Server","","",7,null],[13,"Channel","","",7,null],[4,"ItemType","","",null,null],[13,"Server","","",8,null],[13,"Channel","","",8,null],[13,"Client","","",8,null],[4,"MenuType","","",null,null],[13,"Global","","",9,null],[13,"Channel","","",9,null],[13,"Client","","",9,null],[4,"GuiProfile","","",null,null],[13,"SoundCapture","","",10,null],[13,"SoundPlayback","","",10,null],[13,"Hotkey","","",10,null],[13,"Soundpack","","",10,null],[13,"Identity","","",10,null],[4,"ConnectTab","","",null,null],[13,"New","","",11,null],[13,"Current","","",11,null],[13,"NewIfCurrentConnected","","",11,null],[17,"MENU_BUFSZ","","",null,null],[17,"HOTKEY_BUFSZ","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"configureoffer"}],"output":{"name":"configureoffer"}}],[11,"eq","","",6,{"inputs":[{"name":"configureoffer"},{"name":"configureoffer"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"configureoffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"messagetarget"}],"output":{"name":"messagetarget"}}],[11,"eq","","",7,{"inputs":[{"name":"messagetarget"},{"name":"messagetarget"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"messagetarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"eq","","",8,{"inputs":[{"name":"itemtype"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"itemtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"menutype"}],"output":{"name":"menutype"}}],[11,"eq","","",9,{"inputs":[{"name":"menutype"},{"name":"menutype"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"menutype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"guiprofile"}],"output":{"name":"guiprofile"}}],[11,"eq","","",10,{"inputs":[{"name":"guiprofile"},{"name":"guiprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"guiprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"connecttab"}],"output":{"name":"connecttab"}}],[11,"eq","","",11,{"inputs":[{"name":"connecttab"},{"name":"connecttab"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"connecttab"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"public_definitions","ts3plugin_sys","This file contains the definitions of public_definitions.h and public_rare_definitions.h",null,null],[3,"Ts3Vector","ts3plugin_sys::public_definitions","",null,null],[12,"x","","X co-ordinate in 3D space",12,null],[12,"y","","Y co-ordinate in 3D space",12,null],[12,"z","","Z co-ordinate in 3D space",12,null],[3,"VariablesExportItem","","Some structs to handle variables in callbacks",null,null],[12,"item_is_valid","","This item has valid values. ignore this item if 0",13,null],[12,"proposed_is_set","","The value in proposed is set. if 0 ignore proposed",13,null],[12,"current","","Current value (stored in memory)",13,null],[12,"proposed","","New value to change to (const, so no updates please)",13,null],[3,"VariablesExport","","",null,null],[12,"items","","",14,null],[3,"ClientMiniExport","","",null,null],[12,"id","","",15,null],[12,"channel","","",15,null],[12,"ident","","",15,null],[12,"nickname","","",15,null],[4,"TalkStatus","","",null,null],[13,"NotTalking","","",16,null],[13,"Talking","","",16,null],[13,"TalkingWhileDisabled","","",16,null],[4,"CodecType","","",null,null],[13,"SpeexNarrowband","","Mono,   16bit,  8kHz, bitrate dependent on the quality setting",17,null],[13,"SpeexWideband","","Mono,   16bit, 16kHz, bitrate dependent on the quality setting",17,null],[13,"SpeexUltrawideband","","Mono,   16bit, 32kHz, bitrate dependent on the quality setting",17,null],[13,"CeltMono","","Mono,   16bit, 48kHz, bitrate dependent on the quality setting",17,null],[13,"OpusVoice","","Mono,   16bit, 48kHz, bitrate dependent on the quality setting, optimized for voice",17,null],[13,"OpusMusic","","Stereo, 16bit, 48kHz, bitrate dependent on the quality setting, optimized for music",17,null],[4,"CodecEncryptionMode","","",null,null],[13,"PerChannel","","",18,null],[13,"ForcedOff","","",18,null],[13,"ForcedOn","","",18,null],[4,"TextMessageTargetMode","","",null,null],[13,"Client","","",19,null],[13,"Channel","","",19,null],[13,"Server","","",19,null],[13,"Max","","",19,null],[4,"MuteInputStatus","","",null,null],[13,"None","","",20,null],[13,"Muted","","",20,null],[4,"MuteOutputStatus","","",null,null],[13,"None","","",21,null],[13,"Muted","","",21,null],[4,"HardwareInputStatus","","",null,null],[13,"Disabled","","",22,null],[13,"Enabled","","",22,null],[4,"HardwareOutputStatus","","",null,null],[13,"Disabled","","",23,null],[13,"Enabled","","",23,null],[4,"InputDeactivationStatus","","",null,null],[13,"Active","","",24,null],[13,"Deactivated","","",24,null],[4,"ReasonIdentifier","","",null,null],[13,"None","","No reason data",25,null],[13,"Moved","","{SectionInvoker}",25,null],[13,"Subscription","","No reason data",25,null],[13,"LostConnection","","reasonmsg = reason",25,null],[13,"KickChannel","","{SectionInvoker} reasonmsg=reason; {SectionInvoker} is only added server-&gt;client",25,null],[13,"KickServer","","{SectionInvoker} reasonmsg=reason; {SectionInvoker} is only added server-&gt;client",25,null],[13,"KickServerBan","","{SectionInvoker} reasonmsg=reason bantime=time; {SectionInvoker} is only added server-&gt;client",25,null],[13,"Serverstop","","reasonmsg = reason",25,null],[13,"Clientdisconnect","","reasonmsg = reason",25,null],[13,"Channelupdate","","No reason data",25,null],[13,"Channeledit","","{SectionInvoker}",25,null],[13,"ClientdisconnectServerShutdown","","reasonmsg = reason",25,null],[4,"ChannelProperties","","",null,null],[13,"Name","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"Topic","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"Description","","Must be requested (=&gt; requestChannelDescription)",26,null],[13,"Password","","Not available client side",26,null],[13,"Codec","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"CodecQuality","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"MaxClients","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"MaxFamilyClients","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"Order","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagPermanent","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagSemiPermanent","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagDefault","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagPassword","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"CodecLatencyFactor","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"CodecIsUnencrypted","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"SecuritySalt","","Not available client side, not used in teamspeak, only SDK. Sets the options+salt for security hash.",26,null],[13,"DeleteDelay","","How many seconds to wait before deleting this channel",26,null],[13,"Dummy2","","Rare properties",26,null],[13,"Dummy3","","",26,null],[13,"Dummy4","","",26,null],[13,"Dummy5","","",26,null],[13,"Dummy6","","",26,null],[13,"Dummy7","","",26,null],[13,"FlagMaxClientsUnlimited","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagMaxFamilyClientsUnlimited","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagMaxFamilyClientsInherited","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagAreSubscribed","","Only available client side, stores whether we are subscribed to this channel",26,null],[13,"Filepath","","Not available client side, the folder used for file-transfers for this channel",26,null],[13,"NeededTalkPower","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"ForcedSilence","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"NamePhonetic","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"IconId","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"FlagPrivate","","Available for all channels that are &quot;in view&quot;, always up-to-date",26,null],[13,"Endmarker","","",26,null],[4,"ClientProperties","","",null,null],[13,"UniqueIdentifier","","Automatically up-to-date for any client &quot;in view&quot;, can be used to identify this particular client installation",27,null],[13,"Nickname","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"Version","","For other clients than ourself, this needs to be requested (=&gt; requestClientVariables)",27,null],[13,"Platform","","For other clients than ourself, this needs to be requested (=&gt; requestClientVariables)",27,null],[13,"FlagTalking","","Automatically up-to-date for any client that can be heard (in room / whisper)",27,null],[13,"InputMuted","","Automatically up-to-date for any client &quot;in view&quot;, this clients microphone mute status",27,null],[13,"OutputMuted","","Automatically up-to-date for any client &quot;in view&quot;, this clients headphones/speakers/mic combined mute status",27,null],[13,"OutputOnlyMuted","","Automatically up-to-date for any client &quot;in view&quot;, this clients headphones/speakers only mute status",27,null],[13,"InputHardware","","Automatically up-to-date for any client &quot;in view&quot;, this clients microphone hardware status (is the capture device opened?)",27,null],[13,"OutputHardware","","Automatically up-to-date for any client &quot;in view&quot;, this clients headphone/speakers hardware status (is the playback device opened?)",27,null],[13,"InputDeactivated","","Only usable for ourself, not propagated to the network",27,null],[13,"IdleTime","","Internal use",27,null],[13,"DefaultChannel","","Only usable for ourself, the default channel we used to connect on our last connection attempt",27,null],[13,"DefaultChannelPassword","","Internal use",27,null],[13,"ServerPassword","","Internal use",27,null],[13,"MetaData","","Automatically up-to-date for any client &quot;in view&quot;, not used by TeamSpeak, free storage for sdk users",27,null],[13,"IsMuted","","Only make sense on the client side locally, &quot;1&quot; if this client is currently muted by us, &quot;0&quot; if he is not",27,null],[13,"IsRecording","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"VolumeModificator","","Internal use",27,null],[13,"VersionSign","","Sign",27,null],[13,"SecurityHash","","SDK use, not used by teamspeak. Hash is provided by an outside source. A channel will use the security salt + other client data to calculate a hash, which must be the same as the one provided here.",27,null],[13,"Dummy3","","Rare properties",27,null],[13,"Dummy4","","",27,null],[13,"Dummy5","","",27,null],[13,"Dummy6","","",27,null],[13,"Dummy7","","",27,null],[13,"Dummy8","","",27,null],[13,"Dummy9","","",27,null],[13,"KeyOffset","","Internal use",27,null],[13,"LastVarRequest","","Internal use",27,null],[13,"LoginName","","Used for serverquery clients, makes no sense on normal clients currently",27,null],[13,"LoginPassword","","Used for serverquery clients, makes no sense on normal clients currently",27,null],[13,"DatabaseId","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds database client id",27,null],[13,"ChannelGroupId","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds database client id",27,null],[13,"Servergroups","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds all servergroups client belongs too",27,null],[13,"Created","","This needs to be requested (=&gt; requestClientVariables), first time this client connected to this server",27,null],[13,"Lastconnected","","This needs to be requested (=&gt; requestClientVariables), last time this client connected to this server",27,null],[13,"Totalconnections","","This needs to be requested (=&gt; requestClientVariables), how many times this client connected to this server",27,null],[13,"Away","","Automatically up-to-date for any client &quot;in view&quot;, this clients away status",27,null],[13,"AwayMessage","","Automatically up-to-date for any client &quot;in view&quot;, this clients away status",27,null],[13,"Type","","Automatically up-to-date for any client &quot;in view&quot;, determines if this is a real client or a server-query connection",27,null],[13,"FlagAvatar","","Automatically up-to-date for any client &quot;in view&quot;, this client got an avatar",27,null],[13,"TalkPower","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds database client id",27,null],[13,"TalkRequest","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds timestamp where client requested to talk",27,null],[13,"TalkRequestMsg","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, holds matter for the request",27,null],[13,"Description","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"IsTalker","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"MonthBytesUploaded","","This needs to be requested (=&gt; requestClientVariables)",27,null],[13,"MonthBytesDownloaded","","This needs to be requested (=&gt; requestClientVariables)",27,null],[13,"TotalBytesUploaded","","This needs to be requested (=&gt; requestClientVariables)",27,null],[13,"TotalBytesDownloaded","","This needs to be requested (=&gt; requestClientVariables)",27,null],[13,"IsPrioritySpeaker","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"UnreadMessages","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"NicknamePhonetic","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"NeededServerqueryViewPower","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"DefaultToken","","Only usable for ourself, the default token we used to connect on our last connection attempt",27,null],[13,"IconId","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"IsChannelCommander","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"Country","","Automatically up-to-date for any client &quot;in view&quot;",27,null],[13,"ChannelGroupInheritedChannelId","","Automatically up-to-date for any client &quot;in view&quot;, only valid with PERMISSION feature, contains channel_id where the channel_group_id is set from",27,null],[13,"Badges","","Automatically up-to-date for any client &quot;in view&quot;, stores icons for partner badges",27,null],[13,"Endmarker","","",27,null],[4,"VirtualServerProperties","","",null,null],[13,"UniqueIdentifier","","Available when connected, can be used to identify this particular server installation",28,null],[13,"Name","","Available and always up-to-date when connected",28,null],[13,"Welcomemessage","","Available when connected, (=&gt; requestServerVariables)",28,null],[13,"Platform","","Available when connected",28,null],[13,"Version","","Available when connected",28,null],[13,"MaxClients","","Only available on request (=&gt; requestServerVariables), stores the maximum number of clients that may currently join the server",28,null],[13,"Password","","Not available to clients, the server password",28,null],[13,"ClientsOnline","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"ChannelsOnline","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"Created","","Available when connected, stores the time when the server was created",28,null],[13,"Uptime","","Only available on request (=&gt; requestServerVariables), the time since the server was started",28,null],[13,"CodecEncryptionMode","","Available and always up-to-date when connected",28,null],[13,"Dummy0","","Rare properties",28,null],[13,"Dummy1","","",28,null],[13,"Dummy2","","",28,null],[13,"Dummy3","","",28,null],[13,"Dummy4","","",28,null],[13,"Dummy5","","",28,null],[13,"Dummy6","","",28,null],[13,"Dummy7","","",28,null],[13,"Dummy8","","",28,null],[13,"Keypair","","Internal use",28,null],[13,"Hostmessage","","Available when connected, not updated while connected",28,null],[13,"HostmessageMode","","Available when connected, not updated while connected",28,null],[13,"Filebase","","Not available to clients, stores the folder used for file transfers",28,null],[13,"DefaultServerGroup","","The client permissions server group that a new client gets assigned",28,null],[13,"DefaultChannelGroup","","The channel permissions group that a new client gets assigned when joining a channel",28,null],[13,"FlagPassword","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"DefaultChannelAdminGroup","","The channel permissions group that a client gets assigned when creating a channel",28,null],[13,"MaxDownloadTotalBandwidth","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MaxUploadTotalBandwidth","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"HostbannerUrl","","Available when connected, always up-to-date",28,null],[13,"HostbannerGfxUrl","","Available when connected, always up-to-date",28,null],[13,"HostbannerGfxInterval","","Available when connected, always up-to-date",28,null],[13,"ComplainAutobanCount","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"ComplainAutobanTime","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"ComplainRemoveTime","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MinClientsInChannelBeforeForcedSilence","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"PrioritySpeakerDimmModificator","","Available when connected, always up-to-date",28,null],[13,"Id","","Available when connected",28,null],[13,"AntifloodPointsTickReduce","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"AntifloodPointsNeededCommandBlock","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"AntifloodPointsNeededIpBlock","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"ClientConnections","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"QueryClientConnections","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"HostbuttonTooltip","","Available when connected, always up-to-date",28,null],[13,"HostbuttonUrl","","Available when connected, always up-to-date",28,null],[13,"HostbuttonGfxUrl","","Available when connected, always up-to-date",28,null],[13,"QueryclientsOnline","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"DownloadQuota","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"UploadQuota","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MonthBytesDownloaded","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MonthBytesUploaded","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalBytesDownloaded","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalBytesUploaded","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"Port","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"Autostart","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MachineId","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"NeededIdentitySecurityLevel","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogClient","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogQuery","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogChannel","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogPermissions","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogServer","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"LogFiletransfer","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"MinClientVersion","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"NamePhonetic","","Available when connected, always up-to-date",28,null],[13,"IconId","","Available when connected, always up-to-date",28,null],[13,"ReservedSlots","","Available when connected, always up-to-date",28,null],[13,"TotalPacketlossSpeech","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalPacketlossKeepalive","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalPacketlossControl","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalPacketlossTotal","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"TotalPing","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"Ip","","Internal use | contains only ONE binded ip",28,null],[13,"WeblistEnabled","","Only available on request (=&gt; requestServerVariables)",28,null],[13,"AutogeneratedPrivilegekey","","Internal use",28,null],[13,"AskForPrivilegekey","","Available when connected",28,null],[13,"HostbannerMode","","Available when connected, always up-to-date",28,null],[13,"ChannelTempDeleteDelayDefault","","Available when connected, always up-to-date",28,null],[13,"Endmarker","","",28,null],[4,"ConnectionProperties","","",null,null],[13,"Ping","","Average latency for a round trip through and back this connection",29,null],[13,"PingDeviation","","Standard deviation of the above average latency",29,null],[13,"ConnectedTime","","How long the connection exists already",29,null],[13,"IdleTime","","How long since the last action of this client",29,null],[13,"ClientIp","","IP of this client (as seen from the server side)",29,null],[13,"ClientPort","","Port of this client (as seen from the server side)",29,null],[13,"ServerIp","","IP of the server (seen from the client side) - only available on yourself, not for remote clients, not available server side",29,null],[13,"ServerPort","","Port of the server (seen from the client side) - only available on yourself, not for remote clients, not available server side",29,null],[13,"PacketsSentSpeech","","How many Speech packets were sent through this connection",29,null],[13,"PacketsSentKeepalive","","",29,null],[13,"PacketsSentControl","","",29,null],[13,"PacketsSentTotal","","How many packets were sent totally (this is PACKETS_SENT_SPEECH + PACKETS_SENT_KEEPALIVE + PACKETS_SENT_CONTROL)",29,null],[13,"BytesSentSpeech","","",29,null],[13,"BytesSentKeepalive","","",29,null],[13,"BytesSentControl","","",29,null],[13,"BytesSentTotal","","",29,null],[13,"PacketsReceivedSpeech","","",29,null],[13,"PacketsReceivedKeepalive","","",29,null],[13,"PacketsReceivedControl","","",29,null],[13,"PacketsReceivedTotal","","",29,null],[13,"BytesReceivedSpeech","","",29,null],[13,"BytesReceivedKeepalive","","",29,null],[13,"BytesReceivedControl","","",29,null],[13,"BytesReceivedTotal","","",29,null],[13,"PacketlossSpeech","","",29,null],[13,"PacketlossKeepalive","","",29,null],[13,"PacketlossControl","","",29,null],[13,"PacketlossTotal","","The probability with which a packet round trip failed because a packet was lost",29,null],[13,"Server2ClientPacketlossSpeech","","The probability with which a speech packet failed from the server to the client",29,null],[13,"Server2ClientPacketlossKeepalive","","",29,null],[13,"Server2ClientPacketlossControl","","",29,null],[13,"Server2ClientPacketlossTotal","","",29,null],[13,"Client2ServerPacketlossSpeech","","",29,null],[13,"Client2ServerPacketlossKeepalive","","",29,null],[13,"Client2ServerPacketlossControl","","",29,null],[13,"Client2ServerPacketlossTotal","","",29,null],[13,"BandwidthSentLastSecondSpeech","","Howmany bytes of speech packets we sent during the last second",29,null],[13,"BandwidthSentLastSecondKeepalive","","",29,null],[13,"BandwidthSentLastSecondControl","","",29,null],[13,"BandwidthSentLastSecondTotal","","",29,null],[13,"BandwidthSentLastMinuteSpeech","","Howmany bytes/s of speech packets we sent in average during the last minute",29,null],[13,"BandwidthSentLastMinuteKeepalive","","",29,null],[13,"BandwidthSentLastMinuteControl","","",29,null],[13,"BandwidthSentLastMinuteTotal","","",29,null],[13,"BandwidthReceivedLastSecondSpeech","","",29,null],[13,"BandwidthReceivedLastSecondKeepalive","","",29,null],[13,"BandwidthReceivedLastSecondControl","","",29,null],[13,"BandwidthReceivedLastSecondTotal","","",29,null],[13,"BandwidthReceivedLastMinuteSpeech","","",29,null],[13,"BandwidthReceivedLastMinuteKeepalive","","",29,null],[13,"BandwidthReceivedLastMinuteControl","","",29,null],[13,"BandwidthReceivedLastMinuteTotal","","",29,null],[13,"Dummy0","","Rare properties",29,null],[13,"Dummy1","","",29,null],[13,"Dummy2","","",29,null],[13,"Dummy3","","",29,null],[13,"Dummy4","","",29,null],[13,"Dummy5","","",29,null],[13,"Dummy6","","",29,null],[13,"Dummy7","","",29,null],[13,"Dummy8","","",29,null],[13,"Dummy9","","",29,null],[13,"FileTransferBandwidthSent","","How many bytes per second are currently being sent by file transfers",29,null],[13,"FiletransferBandwidthReceived","","Bow many bytes per second are currently being received by file transfers",29,null],[13,"FiletransferBytesReceivedTotal","","How many bytes we received in total through file transfers",29,null],[13,"FiletransferBytesSentTotal","","How many bytes we sent in total through file transfers",29,null],[13,"Endmarker","","",29,null],[4,"LogTypes","","",null,null],[13,"None","","",30,null],[13,"File","","",30,null],[13,"Console","","",30,null],[13,"Userlogging","","",30,null],[13,"NoNetlogging","","",30,null],[13,"Database","","",30,null],[4,"LogLevel","","",null,null],[13,"Critical","","These messages stop the program",31,null],[13,"Error","","Everything that is really bad, but not so bad we need to shut down",31,null],[13,"Warning","","Everything that *might* be bad",31,null],[13,"Debug","","Output that might help find a problem",31,null],[13,"Info","","Informational output, like &quot;starting database version x.y.z&quot;",31,null],[13,"Devel","","Developer only output (will not be displayed in release mode)",31,null],[4,"GroupWhisperType","","",null,null],[13,"Servergroup","","",32,null],[13,"Channelgroup","","",32,null],[13,"Channelcommander","","",32,null],[13,"Allclients","","",32,null],[13,"Endmarker","","",32,null],[4,"GroupWhisperTargetMode","","",null,null],[13,"All","","",33,null],[13,"Currentchannel","","",33,null],[13,"Parentchannel","","",33,null],[13,"Allparentchannel","","",33,null],[13,"Channelfamily","","",33,null],[13,"Ancestorchannelfamily","","",33,null],[13,"Subchannels","","",33,null],[13,"Endmarker","","",33,null],[4,"MonoSoundDestination","","",null,null],[13,"All","","Send mono sound to all available speakers",34,null],[13,"FrontCenter","","Send mono sound to front center speaker if available",34,null],[13,"FrontLeftAndRight","","Send mono sound to front left/right speakers if available",34,null],[4,"SecuritySaltOptions","","",null,null],[13,"CheckNickname","","Put nickname into security hash",35,null],[13,"CheckMetaData","","Put (game)meta data into security hash",35,null],[4,"ClientCommand","","This enum is used to disable client commands on the server",null,null],[13,"RequestConnectionInfo","","",36,null],[13,"RequestClientMove","","",36,null],[13,"RequestXXMuteClients","","",36,null],[13,"RequestClientKickFromXXX","","",36,null],[13,"FlushChannelCreation","","",36,null],[13,"FlushChannelUpdate","","",36,null],[13,"RequestChannelMove","","",36,null],[13,"RequestChannelDelete","","",36,null],[13,"RequestChannelDescription","","",36,null],[13,"RequestChannelXXSubscripeXX","","",36,null],[13,"RequestServerConnectionInfo","","",36,null],[13,"RequestSendXXXTextMsg","","",36,null],[13,"Endmarker","","",36,null],[4,"ACLType","","Access Control List",null,null],[13,"None","","",37,null],[13,"WhiteList","","",37,null],[13,"BlackList","","",37,null],[4,"GroupShowNameTreeMode","","",null,null],[13,"None","","Dont group show name",38,null],[13,"Before","","Show group name before client name",38,null],[13,"Behind","","Show group name behind client name",38,null],[4,"PluginTargetMode","","",null,null],[13,"CurrentChannel","","Send plugincmd to all clients in current channel",39,null],[13,"Server","","Send plugincmd to all clients on server",39,null],[13,"Client","","Send plugincmd to all given client ids",39,null],[13,"CurrentChannelSubscribedClients","","Send plugincmd to all subscribed clients in current channel",39,null],[13,"Max","","",39,null],[4,"ServerBinding","","",null,null],[13,"Virtualserver","","",40,null],[13,"Serverquery","","",40,null],[13,"Filetransfer","","",40,null],[4,"HostmessageMode","","",null,null],[13,"None","","Dont display anything",41,null],[13,"Log","","Display message inside log",41,null],[13,"Modal","","Display message inside a modal dialog",41,null],[13,"Modalquit","","Display message inside a modal dialog and quit/close server/connection",41,null],[4,"HostbannerMode","","",null,null],[13,"NoAdjust","","Do not adjust",42,null],[13,"AdjustIgnoreAspect","","Do not adjust",42,null],[13,"AdjustKeepAspect","","Do not adjust",42,null],[4,"FileTransferState","","",null,null],[13,"Initialising","","",43,null],[13,"Active","","",43,null],[13,"Finished","","",43,null],[4,"FileListType","","",null,null],[13,"Directory","","",44,null],[13,"File","","",44,null],[4,"ClientType","","",null,null],[13,"Normal","","",45,null],[13,"Serverquery","","",45,null],[4,"AwayStatus","","",null,null],[13,"None","","",46,null],[13,"Zzz","","",46,null],[4,"CommandLinePropertiesRare","","",null,null],[13,"Nothing","","",47,null],[13,"Endmarker","","",47,null],[4,"ServerInstancePropertiesRare","","",null,null],[13,"DatabaseVersion","","",48,null],[13,"FiletransferPort","","",48,null],[13,"ServerEntropy","","",48,null],[13,"MonthlyTimestamp","","",48,null],[13,"MaxDownloadTotalBandwidth","","",48,null],[13,"MaxUploadTotalBandwidth","","",48,null],[13,"GuestServerqueryGroup","","",48,null],[13,"ServerqueryFloodCommands","","How many commands we can issue while in the SERVERINSTANCE_SERVERQUERY_FLOOD_TIME window",48,null],[13,"ServerqueryFloodTime","","Time window in seconds for max command execution check",48,null],[13,"ServerqueryBanTime","","How many seconds someone get banned if he floods",48,null],[13,"TemplateServeradminGroup","","",48,null],[13,"TemplateServerdefaultGroup","","",48,null],[13,"TemplateChanneladminGroup","","",48,null],[13,"TemplateChannelDefaultGroup","","",48,null],[13,"PermissionsVersion","","",48,null],[13,"PendingConnectionsPerIp","","",48,null],[13,"Endmarker","","",48,null],[4,"LicenseViolationType","","",null,null],[13,"No","","",49,null],[13,"Slot","","",49,null],[13,"SlotSuspicion","","",49,null],[17,"MAX_SIZE_CHANNEL_NAME","","Limited length, measured in characters",null,null],[17,"MAX_SIZE_VIRTUALSERVER_NAME","","",null,null],[17,"MAX_SIZE_CLIENT_NICKNAME","","",null,null],[17,"MIN_SIZE_CLIENT_NICKNAME","","",null,null],[17,"MAX_SIZE_REASON_MESSAGE","","",null,null],[17,"MAX_SIZE_CLIENT_NICKNAME_NONSDK","","",null,null],[17,"MIN_SIZE_CLIENT_NICKNAME_NONSDK","","",null,null],[17,"MAX_SIZE_AWAY_MESSAGE","","",null,null],[17,"MAX_SIZE_GROUP_NAME","","",null,null],[17,"MAX_SIZE_TALK_REQUEST_MESSAGE","","",null,null],[17,"MAX_SIZE_COMPLAIN_MESSAGE","","",null,null],[17,"MAX_SIZE_CLIENT_DESCRIPTION","","",null,null],[17,"MAX_SIZE_HOST_MESSAGE","","",null,null],[17,"MAX_SIZE_HOSTBUTTON_TOOLTIP","","",null,null],[17,"MAX_SIZE_POKE_MESSAGE","","",null,null],[17,"MAX_SIZE_OFFLINE_MESSAGE","","",null,null],[17,"MAX_SIZE_OFFLINE_MESSAGE_SUBJECT","","",null,null],[17,"MAX_SIZE_TEXTMESSAGE","","Limited length, measured in bytes (UTF-8 encoded)",null,null],[17,"MAX_SIZE_CHANNEL_TOPIC","","",null,null],[17,"MAX_SIZE_CHANNEL_DESCRIPTION","","",null,null],[17,"MAX_SIZE_VIRTUALSERVER_WELCOMEMESSAGE","","",null,null],[17,"MAX_SIZE_PLUGIN_COMMAND","","",null,null],[17,"MAX_SIZE_VIRTUALSERVER_HOSTBANNER_GFX_URL","","",null,null],[17,"MIN_SECONDS_CLIENTID_REUSE","","Minimum amount of seconds before a clientID that was in use can be assigned to a new client",null,null],[17,"MAX_VARIABLES_EXPORT_COUNT","","",null,null],[17,"SPEAKER_FRONT_LEFT","","Speaker locations used by some sound callbacks",null,null],[17,"SPEAKER_FRONT_RIGHT","","",null,null],[17,"SPEAKER_FRONT_CENTER","","",null,null],[17,"SPEAKER_LOW_FREQUENCY","","",null,null],[17,"SPEAKER_BACK_LEFT","","",null,null],[17,"SPEAKER_BACK_RIGHT","","",null,null],[17,"SPEAKER_FRONT_LEFT_OF_CENTER","","",null,null],[17,"SPEAKER_FRONT_RIGHT_OF_CENTER","","",null,null],[17,"SPEAKER_BACK_CENTER","","",null,null],[17,"SPEAKER_SIDE_LEFT","","",null,null],[17,"SPEAKER_SIDE_RIGHT","","",null,null],[17,"SPEAKER_TOP_CENTER","","",null,null],[17,"SPEAKER_TOP_FRONT_LEFT","","",null,null],[17,"SPEAKER_TOP_FRONT_CENTER","","",null,null],[17,"SPEAKER_TOP_FRONT_RIGHT","","",null,null],[17,"SPEAKER_TOP_BACK_LEFT","","",null,null],[17,"SPEAKER_TOP_BACK_CENTER","","",null,null],[17,"SPEAKER_TOP_BACK_RIGHT","","",null,null],[17,"SPEAKER_HEADPHONES_LEFT","","",null,null],[17,"SPEAKER_HEADPHONES_RIGHT","","",null,null],[17,"SPEAKER_MONO","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"talkstatus"}],"output":{"name":"talkstatus"}}],[11,"eq","","",16,{"inputs":[{"name":"talkstatus"},{"name":"talkstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"talkstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"codectype"}],"output":{"name":"codectype"}}],[11,"eq","","",17,{"inputs":[{"name":"codectype"},{"name":"codectype"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"codectype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"codecencryptionmode"}],"output":{"name":"codecencryptionmode"}}],[11,"eq","","",18,{"inputs":[{"name":"codecencryptionmode"},{"name":"codecencryptionmode"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"codecencryptionmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"textmessagetargetmode"}],"output":{"name":"textmessagetargetmode"}}],[11,"eq","","",19,{"inputs":[{"name":"textmessagetargetmode"},{"name":"textmessagetargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"textmessagetargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"muteinputstatus"}],"output":{"name":"muteinputstatus"}}],[11,"eq","","",20,{"inputs":[{"name":"muteinputstatus"},{"name":"muteinputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"muteinputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"muteoutputstatus"}],"output":{"name":"muteoutputstatus"}}],[11,"eq","","",21,{"inputs":[{"name":"muteoutputstatus"},{"name":"muteoutputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"muteoutputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"hardwareinputstatus"}],"output":{"name":"hardwareinputstatus"}}],[11,"eq","","",22,{"inputs":[{"name":"hardwareinputstatus"},{"name":"hardwareinputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"hardwareinputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"hardwareoutputstatus"}],"output":{"name":"hardwareoutputstatus"}}],[11,"eq","","",23,{"inputs":[{"name":"hardwareoutputstatus"},{"name":"hardwareoutputstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"hardwareoutputstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"inputdeactivationstatus"}],"output":{"name":"inputdeactivationstatus"}}],[11,"eq","","",24,{"inputs":[{"name":"inputdeactivationstatus"},{"name":"inputdeactivationstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"inputdeactivationstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"reasonidentifier"}],"output":{"name":"reasonidentifier"}}],[11,"eq","","",25,{"inputs":[{"name":"reasonidentifier"},{"name":"reasonidentifier"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"reasonidentifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"channelproperties"}],"output":{"name":"channelproperties"}}],[11,"eq","","",26,{"inputs":[{"name":"channelproperties"},{"name":"channelproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"channelproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"clientproperties"}],"output":{"name":"clientproperties"}}],[11,"eq","","",27,{"inputs":[{"name":"clientproperties"},{"name":"clientproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"clientproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"virtualserverproperties"}],"output":{"name":"virtualserverproperties"}}],[11,"eq","","",28,{"inputs":[{"name":"virtualserverproperties"},{"name":"virtualserverproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"virtualserverproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"connectionproperties"}],"output":{"name":"connectionproperties"}}],[11,"eq","","",29,{"inputs":[{"name":"connectionproperties"},{"name":"connectionproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"connectionproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"logtypes"}],"output":{"name":"logtypes"}}],[11,"eq","","",30,{"inputs":[{"name":"logtypes"},{"name":"logtypes"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"logtypes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"clone","","",32,{"inputs":[{"name":"groupwhispertype"}],"output":{"name":"groupwhispertype"}}],[11,"eq","","",32,{"inputs":[{"name":"groupwhispertype"},{"name":"groupwhispertype"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"groupwhispertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"groupwhispertargetmode"}],"output":{"name":"groupwhispertargetmode"}}],[11,"eq","","",33,{"inputs":[{"name":"groupwhispertargetmode"},{"name":"groupwhispertargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"groupwhispertargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"monosounddestination"}],"output":{"name":"monosounddestination"}}],[11,"eq","","",34,{"inputs":[{"name":"monosounddestination"},{"name":"monosounddestination"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"monosounddestination"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"securitysaltoptions"}],"output":{"name":"securitysaltoptions"}}],[11,"eq","","",35,{"inputs":[{"name":"securitysaltoptions"},{"name":"securitysaltoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"securitysaltoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"clientcommand"}],"output":{"name":"clientcommand"}}],[11,"eq","","",36,{"inputs":[{"name":"clientcommand"},{"name":"clientcommand"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"clientcommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"acltype"}],"output":{"name":"acltype"}}],[11,"eq","","",37,{"inputs":[{"name":"acltype"},{"name":"acltype"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"acltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"groupshownametreemode"}],"output":{"name":"groupshownametreemode"}}],[11,"eq","","",38,{"inputs":[{"name":"groupshownametreemode"},{"name":"groupshownametreemode"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"groupshownametreemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"plugintargetmode"}],"output":{"name":"plugintargetmode"}}],[11,"eq","","",39,{"inputs":[{"name":"plugintargetmode"},{"name":"plugintargetmode"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"plugintargetmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"serverbinding"}],"output":{"name":"serverbinding"}}],[11,"eq","","",40,{"inputs":[{"name":"serverbinding"},{"name":"serverbinding"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"serverbinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"hostmessagemode"}],"output":{"name":"hostmessagemode"}}],[11,"eq","","",41,{"inputs":[{"name":"hostmessagemode"},{"name":"hostmessagemode"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"hostmessagemode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"hostbannermode"}],"output":{"name":"hostbannermode"}}],[11,"eq","","",42,{"inputs":[{"name":"hostbannermode"},{"name":"hostbannermode"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"hostbannermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"filetransferstate"}],"output":{"name":"filetransferstate"}}],[11,"eq","","",43,{"inputs":[{"name":"filetransferstate"},{"name":"filetransferstate"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"filetransferstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"filelisttype"}],"output":{"name":"filelisttype"}}],[11,"eq","","",44,{"inputs":[{"name":"filelisttype"},{"name":"filelisttype"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"filelisttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"clienttype"}],"output":{"name":"clienttype"}}],[11,"eq","","",45,{"inputs":[{"name":"clienttype"},{"name":"clienttype"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"clienttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"awaystatus"}],"output":{"name":"awaystatus"}}],[11,"eq","","",46,{"inputs":[{"name":"awaystatus"},{"name":"awaystatus"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"awaystatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"commandlinepropertiesrare"}],"output":{"name":"commandlinepropertiesrare"}}],[11,"eq","","",47,{"inputs":[{"name":"commandlinepropertiesrare"},{"name":"commandlinepropertiesrare"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"commandlinepropertiesrare"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"serverinstancepropertiesrare"}],"output":{"name":"serverinstancepropertiesrare"}}],[11,"eq","","",48,{"inputs":[{"name":"serverinstancepropertiesrare"},{"name":"serverinstancepropertiesrare"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"serverinstancepropertiesrare"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"licenseviolationtype"}],"output":{"name":"licenseviolationtype"}}],[11,"eq","","",49,{"inputs":[{"name":"licenseviolationtype"},{"name":"licenseviolationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"licenseviolationtype"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"public_errors","ts3plugin_sys","This file contains the definitions of public_erros.h and public_erros_rare.h",null,null],[4,"Error","ts3plugin_sys::public_errors","",null,null],[13,"Ok","","General",50,null],[13,"Undefined","","",50,null],[13,"NotImplemented","","",50,null],[13,"OkNoUpdate","","",50,null],[13,"DontNotify","","",50,null],[13,"LibTimeLimitReached","","",50,null],[13,"CommandNotFount","","Dunno",50,null],[13,"UnableToBindNetworkPort","","",50,null],[13,"NoNetworkPortAvailable","","",50,null],[13,"ClientInvalidId","","Client",50,null],[13,"ClientNicknameInuse","","",50,null],[13,"ClientProtocolLimitReached","","",50,null],[13,"ClientInvalidType","","",50,null],[13,"ClientAlreadySubscribed","","",50,null],[13,"ClientNotLoggedIn","","",50,null],[13,"ClientCouldNotValidateIdentity","","",50,null],[13,"ClientInvalidPassword","","",50,null],[13,"ClientTooManyClonesConnected","","",50,null],[13,"ClientVersionOutdated","","",50,null],[13,"ClientIsOnline","","",50,null],[13,"ClientIsFlooding","","",50,null],[13,"ClientHacked","","",50,null],[13,"ClientCannotVerifyNow","","",50,null],[13,"ClientLoginNotPermitted","","",50,null],[13,"ClientNotSubscripted","","",50,null],[13,"ChannelInvalidId","","Channel",50,null],[13,"ChannelProtocolLimitReached","","",50,null],[13,"ChannelAlreadyIn","","",50,null],[13,"ChannelnameInuse","","",50,null],[13,"ChannelNotEmpty","","",50,null],[13,"ChannelCannotDeleteDefault","","",50,null],[13,"ChannelDefaultRequirePermanent","","",50,null],[13,"ChannelInvalidFlags","","",50,null],[13,"ChannelParentNotPermanent","","",50,null],[13,"ChannelMaxclientsReached","","",50,null],[13,"ChannelMaxfamilyReached","","",50,null],[13,"ChannelInvalidOrder","","",50,null],[13,"ChannelNoFiletransferSupported","","",50,null],[13,"ChannelInvalidPassword","","",50,null],[13,"ChannelIsPrivateChannel","","",50,null],[13,"ChannelInvalidSecurityHash","","",50,null],[13,"ServerInvalidId","","Server",50,null],[13,"ServerRunning","","",50,null],[13,"ServerIsShuttingDown","","",50,null],[13,"ServerMaxclientsReached","","",50,null],[13,"ServerInvalidPassword","","",50,null],[13,"ServerDeploymentActive","","",50,null],[13,"ServerUnableToStopOwnServer","","",50,null],[13,"ServerIsVirtual","","",50,null],[13,"ServerWrongMachineid","","",50,null],[13,"ServerIsNotRunning","","",50,null],[13,"ServerIsBooting","","",50,null],[13,"ServerStatusInvalid","","",50,null],[13,"ServerModalQuit","","",50,null],[13,"ServerVersionOutdated","","",50,null],[13,"ServerDuplicatedRunning","","",50,null],[13,"Database","","Database",50,null],[13,"DatabaseEmptyResult","","",50,null],[13,"DatabaseDuplicateEntry","","",50,null],[13,"DatabaseNoModifications","","",50,null],[13,"DatabaseConstraint","","",50,null],[13,"DatabaseReinvoke","","",50,null],[13,"ParameterQuote","","",50,null],[13,"ParameterInvalidCount","","",50,null],[13,"ParameterInvalid","","",50,null],[13,"ParameterNotFount","","",50,null],[13,"ParameterConvert","","",50,null],[13,"ParameterInvalidSize","","",50,null],[13,"ParameterMissing","","",50,null],[13,"ParameterChecksum","","",50,null],[13,"VsCritical","","Unsorted, needs further investigation",50,null],[13,"ConnectionLost","","",50,null],[13,"NotConnected","","",50,null],[13,"NoCachedConnectionInfo","","",50,null],[13,"CurrentlyNotPossible","","",50,null],[13,"FailedConnectionInitialisation","","",50,null],[13,"CouldNotResolveHostname","","",50,null],[13,"InvalidServerConnectionoHandlerId","","",50,null],[13,"CouldNotInitialiseInputManager","","",50,null],[13,"ClientlibraryNotInitialised","","",50,null],[13,"ServerlibraryNotInitialised","","",50,null],[13,"WhisperTooManyTargets","","",50,null],[13,"WhisperNoTargets","","",50,null],[13,"FileInvalidName","","File transfer",50,null],[13,"FileInvalidPermissions","","",50,null],[13,"FileAlreadyExists","","",50,null],[13,"FileNotFound","","",50,null],[13,"FileIoError","","",50,null],[13,"FileInvalidTransferId","","",50,null],[13,"FileInvalidPath","","",50,null],[13,"FileNoFilesAvailable","","",50,null],[13,"FileOverwriteExcludesResume","","",50,null],[13,"FileInvalidSize","","",50,null],[13,"FileAlreadyInUse","","",50,null],[13,"FileCouldNotOpenConnection","","",50,null],[13,"FileNoSpaceLeftOnDevice","","",50,null],[13,"FileExceedsFileSystemMaximumSize","","",50,null],[13,"FileTransferConnectionTimeout","","",50,null],[13,"FileConnectionLost","","",50,null],[13,"FileExceedsSuppliedSize","","",50,null],[13,"FileTransferComplete","","",50,null],[13,"FileTransferCanceled","","",50,null],[13,"FileTransferInterrupted","","",50,null],[13,"FileTransferServerQuotaExceeded","","",50,null],[13,"FileTransferClientQuotaExceeded","","",50,null],[13,"FileTransferReset","","",50,null],[13,"FileTransferLimitReached","","",50,null],[13,"SoundPreprocessorDisabled","","Sound",50,null],[13,"SoundInternalPreprocessor","","",50,null],[13,"SoundInternalEncoder","","",50,null],[13,"SoundInternalPlayback","","",50,null],[13,"SoundNoCaptureDeviceAvailable","","",50,null],[13,"SoundNoPlaybackDeviceAvailable","","",50,null],[13,"SoundCouldNotOpenCaptureDevice","","",50,null],[13,"SoundCouldNotOpenPlaybackDevice","","",50,null],[13,"SoundHandlerHasDevice","","",50,null],[13,"SoundInvalidCaptureDevice","","",50,null],[13,"SoundInvalidPlaybackDevice","","",50,null],[13,"SoundInvalidWave","","",50,null],[13,"SoundUnsupportedWave","","",50,null],[13,"SoundOpenWave","","",50,null],[13,"SoundInternalCapture","","",50,null],[13,"SoundDeviceInUse","","",50,null],[13,"SoundDeviceAlreadyRegisterred","","",50,null],[13,"SoundUnknownDevice","","",50,null],[13,"SoundUnsupportedFrequency","","",50,null],[13,"SoundInvalidChannelCount","","",50,null],[13,"SoundReadWave","","",50,null],[13,"SoundNeedMoreData","","For internal purposes only",50,null],[13,"SoundDeviceBusy","","For internal purposes only",50,null],[13,"SoundNoData","","",50,null],[13,"SoundChannelMaskMismatch","","",50,null],[13,"PermissionsInvalidGroupId","","Permissions",50,null],[13,"PermissionsDuplicateEntry","","",50,null],[13,"PermissionsInvalidPermId","","",50,null],[13,"PermissionsEmptyResult","","",50,null],[13,"PermissionsDefaultGroupForbidden","","",50,null],[13,"PermissionsInvalidSize","","",50,null],[13,"PermissionsInvalidValue","","",50,null],[13,"PermissionsGroupNotEmpty","","",50,null],[13,"PermissionsClientInsufficient","","",50,null],[13,"PermissionsInsufficientGroupPower","","",50,null],[13,"PermissionsInsufficientPermissionPower","","",50,null],[13,"PermissionsTemplateGroupIsUsed","","",50,null],[13,"Permissions","","",50,null],[13,"AccountingVirtualserverLimitReached","","Accounting",50,null],[13,"AccountingSlotLimitReached","","",50,null],[13,"AccountingLicenseFileNotFound","","",50,null],[13,"AccountingLicenseDateNotOk","","",50,null],[13,"AccountingUnableToConnectToServer","","",50,null],[13,"AccountingUnknownError","","",50,null],[13,"AcountingServerError","","",50,null],[13,"AccountingInstanceLimitReached","","",50,null],[13,"AccountingInstanceCheckError","","",50,null],[13,"AccountingLicenseFileInvalid","","",50,null],[13,"AccountingRunningElsewhere","","",50,null],[13,"AccountingInstanceDuplicated","","",50,null],[13,"AccountingAlreadyStarted","","",50,null],[13,"AccountingNotStarted","","",50,null],[13,"AccountingToManyStarts","","",50,null],[13,"MessageInvalidId","","Messages",50,null],[13,"BanInvalidId","","Ban",50,null],[13,"ConnectFailedBanned","","",50,null],[13,"RenameFailedBanned","","",50,null],[13,"BanFlooding","","",50,null],[13,"TtsUnableToInitialize","","Tts",50,null],[13,"PriviledgeKeyInvalid","","",50,null],[13,"VoipPjsua","","Voip",50,null],[13,"VoipAlreadyInitialized","","",50,null],[13,"VoipTooManyAccounts","","",50,null],[13,"VoipInvalidAccount","","",50,null],[13,"VoipInternalError","","",50,null],[13,"VoipInvalidConnectionId","","",50,null],[13,"VoipCannotAnswerInitiatedCall","","",50,null],[13,"VoipNotInitialized","","",50,null],[13,"ProvisioningInvalidPassword","","Provisioning server",50,null],[13,"ProvisioningInvalidRequest","","",50,null],[13,"ProvisioningNoSlotsAvailable","","",50,null],[13,"ProvisioningPoolMissing","","",50,null],[13,"ProvisioningPoolUnkown","","",50,null],[13,"ProvisioningUnknownIpLocation","","",50,null],[13,"ProvisioningInternalTriedExceeded","","",50,null],[13,"ProvisioningTooManySlotsRequested","","",50,null],[13,"ProvisioningTooManyReserved","","",50,null],[13,"ProvisioningCouldNotConnect","","",50,null],[13,"ProvisioningAuthServerNotConnected","","",50,null],[13,"ProvisioningAuthDataTooLarge","","",50,null],[13,"ProvisioningAlreadyInitialized","","",50,null],[13,"ProvisioningNotInitialized","","",50,null],[13,"ProvisioningConnecting","","",50,null],[13,"ProvisioningAlreadyConnected","","",50,null],[13,"ProvisioningNotConnected","","",50,null],[13,"ProvisioningIoError","","",50,null],[13,"ProvisioningInvalidTimeout","","",50,null],[13,"ProvisioningTs3severNotFound","","",50,null],[13,"ProvisioningNoPermission","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",50,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ts3functions","ts3plugin_sys","",null,null],[3,"Ts3Functions","ts3plugin_sys::ts3functions","Functions exported to plugin from main binary",null,null],[12,"get_client_lib_version","","",51,null],[12,"get_client_lib_version_number","","",51,null],[12,"spawn_new_server_connection_handler","","",51,null],[12,"destroy_server_connection_handler","","",51,null],[12,"get_error_message","","Error handling",51,null],[12,"free_memory","","Memory management",51,null],[12,"log_message","","Logging",51,null],[12,"get_playback_device_list","","Sound",51,null],[12,"get_playback_mode_list","","",51,null],[12,"get_capture_device_list","","",51,null],[12,"get_capture_mode_list","","",51,null],[12,"get_default_playback_device","","",51,null],[12,"get_default_playback_mode","","",51,null],[12,"get_default_capture_device","","",51,null],[12,"get_default_capture_mode","","",51,null],[12,"open_playback_device","","",51,null],[12,"open_capture_device","","",51,null],[12,"get_current_playback_device_name","","",51,null],[12,"get_current_play_back_mode","","",51,null],[12,"get_current_capture_device_name","","",51,null],[12,"get_current_capture_mode","","",51,null],[12,"initiate_graceful_playback_shutdown","","",51,null],[12,"close_playback_device","","",51,null],[12,"close_capture_device","","",51,null],[12,"activate_capture_device","","",51,null],[12,"play_wave_file_handle","","",51,null],[12,"pause_wave_file_handle","","",51,null],[12,"close_wave_file_handle","","",51,null],[12,"play_wave_file","","",51,null],[12,"register_custom_device","","",51,null],[12,"unregister_custom_device","","",51,null],[12,"process_custom_capture_data","","",51,null],[12,"acquire_custom_playback_data","","",51,null],[12,"get_pre_processor_info_value_float","","Preprocessor",51,null],[12,"get_pre_processor_config_value","","",51,null],[12,"set_pre_processor_config_value","","",51,null],[12,"get_encode_config_value","","Encoder",51,null],[12,"get_playback_config_value_as_float","","Playback",51,null],[12,"set_playback_config_value","","",51,null],[12,"set_client_volume_modifier","","",51,null],[12,"start_voice_recording","","Recording",51,null],[12,"stop_voice_recording","","",51,null],[12,"systemset3d_listener_attributes","","3D sound positioning",51,null],[12,"set3d_wave_attributes","","",51,null],[12,"systemset3d_settings","","",51,null],[12,"channelset3d_attributes","","",51,null],[12,"start_connection","","Interaction with the server",51,null],[12,"stop_connection","","",51,null],[12,"request_client_move","","",51,null],[12,"request_client_variables","","",51,null],[12,"request_client_kick_from_channel","","",51,null],[12,"request_client_kick_from_server","","",51,null],[12,"request_channel_delete","","",51,null],[12,"request_channel_move","","",51,null],[12,"request_send_private_text_msg","","",51,null],[12,"request_send_channel_text_msg","","",51,null],[12,"request_send_server_text_msg","","",51,null],[12,"request_connection_info","","",51,null],[12,"request_client_set_whisper_list","","",51,null],[12,"request_channel_subscribe","","",51,null],[12,"request_channel_subscribe_all","","",51,null],[12,"request_channel_unsubscribe","","",51,null],[12,"request_channel_unsubscribe_all","","",51,null],[12,"request_channel_description","","",51,null],[12,"request_mute_clients","","",51,null],[12,"requset_unmute_clients","","",51,null],[12,"request_client_poke","","",51,null],[12,"request_client_ids","","",51,null],[12,"client_chat_closed","","",51,null],[12,"client_chat_composing","","",51,null],[12,"request_server_temporary_password_add","","",51,null],[12,"request_server_temporary_password_del","","",51,null],[12,"request_server_temporary_password_list","","",51,null],[12,"get_client_id","","Access clientlib information\nQuery own client id",51,null],[12,"get_client_self_variable_as_int","","Client info",51,null],[12,"get_client_self_variable_as_string","","",51,null],[12,"set_client_self_variable_as_int","","",51,null],[12,"set_client_self_variable_as_string","","",51,null],[12,"flush_client_self_updates","","",51,null],[12,"get_client_variable_as_int","","",51,null],[12,"get_client_variable_as_uint64","","",51,null],[12,"get_client_variable_as_string","","",51,null],[12,"get_client_list","","",51,null],[12,"get_channel_of_client","","",51,null],[12,"get_channel_variable_as_int","","Channel info",51,null],[12,"get_channel_variable_as_uint64","","",51,null],[12,"get_channel_variable_as_string","","",51,null],[12,"get_channel_id_from_channel_names","","",51,null],[12,"set_channel_variable_as_int","","",51,null],[12,"set_channel_variable_as_uint64","","",51,null],[12,"set_channel_variable_as_string","","",51,null],[12,"flush_channel_updates","","",51,null],[12,"flush_channel_creation","","",51,null],[12,"get_channel_list","","",51,null],[12,"get_channel_client_list","","",51,null],[12,"get_parent_channel_of_channel","","",51,null],[12,"get_server_connection_handler_list","","Server info",51,null],[12,"get_server_variable_as_int","","",51,null],[12,"get_server_variable_as_uint64","","",51,null],[12,"get_server_variable_as_string","","",51,null],[12,"request_server_variables","","",51,null],[12,"get_connection_status","","Connection info",51,null],[12,"get_connection_variable_as_uint64","","",51,null],[12,"get_connection_variable_as_double","","",51,null],[12,"get_connection_variable_as_string","","",51,null],[12,"clean_up_connection_info","","",51,null],[12,"request_client_dbid_from_uid","","Client related",51,null],[12,"request_client_name_from_uid","","",51,null],[12,"request_client_name_from_dbid","","",51,null],[12,"request_client_edit_description","","",51,null],[12,"request_client_set_is_talker","","",51,null],[12,"request_is_talker","","",51,null],[12,"request_send_client_query_command","","Plugin related",51,null],[12,"get_transfer_file_name","","Filetransfer",51,null],[12,"get_transfer_file_path","","",51,null],[12,"get_transfer_file_size","","",51,null],[12,"get_transfer_file_size_done","","",51,null],[12,"is_transfer_sender","","1 == upload, 0 == download",51,null],[12,"get_transfer_status","","",51,null],[12,"get_current_transfer_speed","","",51,null],[12,"get_average_transfer_speed","","",51,null],[12,"get_transfer_run_time","","",51,null],[12,"send_file","","",51,null],[12,"request_file","","",51,null],[12,"halt_transfer","","",51,null],[12,"request_file_list","","",51,null],[12,"request_file_info","","",51,null],[12,"request_delete_file","","",51,null],[12,"request_create_directory","","",51,null],[12,"requset_rename_file","","",51,null],[12,"request_message_add","","Offline message management",51,null],[12,"request_message_del","","",51,null],[12,"request_message_get","","",51,null],[12,"request_message_list","","",51,null],[12,"request_message_update_flag","","",51,null],[12,"verify_server_password","","Interacting with the server - confirming passwords",51,null],[12,"verify_channel_password","","",51,null],[12,"banclient","","Interacting with the server - banning",51,null],[12,"banadd","","",51,null],[12,"banclient_dbid","","",51,null],[12,"bandel","","",51,null],[12,"bandelall","","",51,null],[12,"request_ban_list","","",51,null],[12,"request_complain_add","","Interacting with the server - complain",51,null],[12,"request_complain_del","","",51,null],[12,"request_complain_del_all","","",51,null],[12,"request_complain_list","","",51,null],[12,"request_server_group_list","","Permissions",51,null],[12,"request_server_group_add","","",51,null],[12,"request_server_group_del","","",51,null],[12,"request_server_group_add_client","","",51,null],[12,"request_server_group_del_client","","",51,null],[12,"request_server_groups_by_client_id","","",51,null],[12,"request_server_group_add_perm","","",51,null],[12,"request_server_group_del_perm","","",51,null],[12,"request_server_group_perm_list","","",51,null],[12,"request_server_group_client_list","","",51,null],[12,"request_channel_group_list","","",51,null],[12,"request_channel_group_add","","",51,null],[12,"request_channel_group_del","","",51,null],[12,"request_channel_group_add_perm","","",51,null],[12,"request_channel_group_del_perm","","",51,null],[12,"request_channel_group_perm_list","","",51,null],[12,"request_set_client_channel_group","","",51,null],[12,"request_channel_add_perm","","",51,null],[12,"request_channel_del_perm","","",51,null],[12,"request_channel_perm_list","","",51,null],[12,"request_client_add_perm","","",51,null],[12,"request_client_del_perm","","",51,null],[12,"request_client_perm_list","","",51,null],[12,"request_channel_client_add_perm","","",51,null],[12,"request_channel_client_del_perm","","",51,null],[12,"request_channel_client_perm_list","","",51,null],[12,"priviledge_key_use","","",51,null],[12,"request_permission_list","","",51,null],[12,"request_permission_overview","","",51,null],[12,"client_property_string_to_flag","","Helper functions",51,null],[12,"channel_property_string_to_flag","","",51,null],[12,"server_property_string_to_flag","","",51,null],[12,"get_app_path","","Client functions",51,null],[12,"get_resources_path","","",51,null],[12,"get_config_path","","",51,null],[12,"get_plugin_path","","",51,null],[12,"get_current_server_connection_handler_id","","",51,null],[12,"print_message","","",51,null],[12,"print_message_to_current_tab","","",51,null],[12,"urls_to_bb","","",51,null],[12,"send_plugin_command","","",51,null],[12,"get_directories","","",51,null],[12,"get_server_connect_info","","",51,null],[12,"get_channel_connection_info","","",51,null],[12,"create_return_code","","",51,null],[12,"request_info_update","","",51,null],[12,"get_server_version","","",51,null],[12,"is_whispering","","",51,null],[12,"is_receiving_whisper","","",51,null],[12,"get_avatar","","",51,null],[12,"set_plugin_menu_enabled","","",51,null],[12,"show_hotkey_setup","","",51,null],[12,"request_hotkey_input_dialog","","",51,null],[12,"get_hotkey_from_keyword","","",51,null],[12,"get_client_display_name","","",51,null],[12,"get_bookmark_list","","",51,null],[12,"get_profile_list","","",51,null],[12,"gui_connect","","",51,null],[12,"gui_connect_bookmark","","",51,null],[12,"create_bookmark","","",51,null],[12,"get_permission_id_by_name","","",51,null],[12,"get_client_needed_permission","","",51,null]],"paths":[[4,"Visibility"],[4,"ConnectStatus"],[3,"MenuItem"],[3,"Hotkey"],[3,"BookmarkItem"],[3,"BookmarkList"],[4,"ConfigureOffer"],[4,"MessageTarget"],[4,"ItemType"],[4,"MenuType"],[4,"GuiProfile"],[4,"ConnectTab"],[3,"Ts3Vector"],[3,"VariablesExportItem"],[3,"VariablesExport"],[3,"ClientMiniExport"],[4,"TalkStatus"],[4,"CodecType"],[4,"CodecEncryptionMode"],[4,"TextMessageTargetMode"],[4,"MuteInputStatus"],[4,"MuteOutputStatus"],[4,"HardwareInputStatus"],[4,"HardwareOutputStatus"],[4,"InputDeactivationStatus"],[4,"ReasonIdentifier"],[4,"ChannelProperties"],[4,"ClientProperties"],[4,"VirtualServerProperties"],[4,"ConnectionProperties"],[4,"LogTypes"],[4,"LogLevel"],[4,"GroupWhisperType"],[4,"GroupWhisperTargetMode"],[4,"MonoSoundDestination"],[4,"SecuritySaltOptions"],[4,"ClientCommand"],[4,"ACLType"],[4,"GroupShowNameTreeMode"],[4,"PluginTargetMode"],[4,"ServerBinding"],[4,"HostmessageMode"],[4,"HostbannerMode"],[4,"FileTransferState"],[4,"FileListType"],[4,"ClientType"],[4,"AwayStatus"],[4,"CommandLinePropertiesRare"],[4,"ServerInstancePropertiesRare"],[4,"LicenseViolationType"],[4,"Error"],[3,"Ts3Functions"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",51,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",51,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",51,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",51,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",51,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",51,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",51,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"hash","core::num","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"shl","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",52,null],[11,"shr","","",52,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",52,null],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",52,null],[11,"sub","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",52,null],[11,"div","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",52,null],[11,"rem","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",52,null],[11,"not","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",52,null],[11,"bitor","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",52,null],[11,"bitand","","",52,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",52,null],[11,"neg","","",52,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",54,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",55,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",57,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",57,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",58,null],[11,"get","","Dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",58,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",59,null],[11,"clone","","",59,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",60,null],[11,"eq","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",60,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",61,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",61,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",62,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",62,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",63,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",63,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",64,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",64,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",65,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",65,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",65,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",66,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",67,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",68,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",69,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",70,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",72,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",70,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",70,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",70,null],[11,"swap","","Stores a value into the bool, returning the old value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",70,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",71,null],[11,"load","","Loads a value from the pointer.",71,null],[11,"store","","Stores a value into the pointer.",71,null],[11,"swap","","Stores a value into the pointer, returning the old value.",71,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"default","","",73,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",73,{"inputs":[{"name":"atomici8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",73,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",73,{"inputs":[{"name":"atomici8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",73,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",73,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",74,{"inputs":[{"name":"atomicu8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",74,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",74,{"inputs":[{"name":"atomicu8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",74,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",74,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",75,{"inputs":[{"name":"atomici16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",75,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",75,{"inputs":[{"name":"atomici16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",75,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",75,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",76,{"inputs":[{"name":"atomicu16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",76,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",76,{"inputs":[{"name":"atomicu16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",76,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",76,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",77,{"inputs":[{"name":"atomici32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",77,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",77,{"inputs":[{"name":"atomici32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",77,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",77,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",78,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",78,{"inputs":[{"name":"atomicu32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",78,{"inputs":[{"name":"atomicu32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",78,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",78,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",79,{"inputs":[{"name":"atomici64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",79,{"inputs":[{"name":"atomici64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",80,{"inputs":[{"name":"atomicu64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",80,{"inputs":[{"name":"atomicu64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",81,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",81,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",82,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",82,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",70,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",83,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",83,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",83,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",83,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",83,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",83,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"fmt","","",84,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",85,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",85,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"deref","","",86,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",86,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",86,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",86,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",87,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",87,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",87,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",88,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",88,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",89,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",89,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"fmt","","",90,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",90,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",91,null],[11,"next","","",91,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"fmt","","",92,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",92,null],[11,"next","","",92,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"fmt","core::iter::range","",93,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",63,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",62,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",65,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",93,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","core::ops","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",94,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",95,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",95,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",96,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",96,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",97,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",97,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",99,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"fmt","","",100,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",100,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",101,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",102,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",103,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",104,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",105,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"nth","","",105,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",105,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",106,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",106,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",106,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",107,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",107,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",108,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",108,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"fmt","","",109,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",110,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",110,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",110,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",111,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",111,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",112,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",113,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",113,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",114,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",51,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",115,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",116,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",117,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",51,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",118,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",119,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",120,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",120,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",120,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",120,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",120,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",120,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",120,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",120,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",120,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",120,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",120,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",120,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",120,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",120,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",120,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",120,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",121,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",122,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",123,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",123,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",120,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",124,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",124,null],[11,"next","","",124,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"count","","",124,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",125,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",125,null],[11,"next","","",125,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"count","","",125,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",125,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",125,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",126,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",126,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",128,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",128,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","","",129,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next","","",130,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next","","",131,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"fmt","","",132,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",132,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",133,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",133,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"count","","",133,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",133,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",133,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",134,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",134,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"count","","",134,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",134,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",134,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",135,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",136,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",137,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",138,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",140,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",140,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",141,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",141,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",141,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",142,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",142,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",143,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",143,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",143,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",144,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"count","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",144,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",144,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",145,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",145,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",146,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",145,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",148,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",149,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",149,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",150,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",150,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",151,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",151,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",152,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",152,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",151,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",153,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",153,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",154,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",154,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",153,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",155,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",155,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next_back","","",155,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",156,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",156,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next_back","","",156,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",158,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",158,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",158,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",158,null],[11,"finish","","",158,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",158,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",159,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",159,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",159,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",160,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",161,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",161,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",162,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",162,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",163,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",163,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",163,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",164,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",164,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",164,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",165,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",165,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",165,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",166,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",166,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",166,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",166,null],[11,"default","","",166,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",166,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",167,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",167,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",168,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",168,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",168,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",168,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",168,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",168,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",168,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",168,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",168,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",168,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",168,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",60,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",83,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",169,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",169,null],[11,"clone","libc","",48,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",49,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",170,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",171,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",50,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",172,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",38,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",39,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",40,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",41,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",42,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",44,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",45,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",28,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",29,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",30,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",173,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",174,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",175,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",176,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",32,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",33,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",34,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",35,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",177,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",36,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",178,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",179,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",26,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"f32","bitflags::__core","Operations and constants for 32-bits floats (`f32` type)",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","Operations and constants for 64-bits floats (`f64` type)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"num","bitflags::__core","Numeric traits and functions for the built-in numeric types.",null,null],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"neg","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::dec2flt","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",2,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"clone","","",3,{"inputs":[{"name":"tryfrominterror"}],"output":{"name":"tryfrominterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tryfrominterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",6,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",8,null],[11,"eq","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",9,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",10,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",10,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",11,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",11,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",12,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",12,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",13,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"fmt","","",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","# Examples",14,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",15,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","bitflags::__core","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,{"inputs":[{"name":"atomici8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,{"inputs":[{"name":"atomici8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"i8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,{"inputs":[{"name":"atomici8"},{"name":"i8"},{"name":"ordering"}],"output":{"name":"i8"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,{"inputs":[{"name":"atomicu8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,{"inputs":[{"name":"atomicu8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"u8"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,{"inputs":[{"name":"atomicu8"},{"name":"u8"},{"name":"ordering"}],"output":{"name":"u8"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,{"inputs":[{"name":"atomici16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,{"inputs":[{"name":"atomici16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"i16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,{"inputs":[{"name":"atomici16"},{"name":"i16"},{"name":"ordering"}],"output":{"name":"i16"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,{"inputs":[{"name":"atomicu16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,{"inputs":[{"name":"atomicu16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"u16"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,{"inputs":[{"name":"atomicu16"},{"name":"u16"},{"name":"ordering"}],"output":{"name":"u16"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,{"inputs":[{"name":"atomici32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,{"inputs":[{"name":"atomici32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"i32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,{"inputs":[{"name":"atomici32"},{"name":"i32"},{"name":"ordering"}],"output":{"name":"i32"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,{"inputs":[{"name":"atomicu32"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,{"inputs":[{"name":"atomicu32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"u32"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,{"inputs":[{"name":"atomicu32"},{"name":"u32"},{"name":"ordering"}],"output":{"name":"u32"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,{"inputs":[{"name":"atomici64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,{"inputs":[{"name":"atomici64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"i64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,{"inputs":[{"name":"atomici64"},{"name":"i64"},{"name":"ordering"}],"output":{"name":"i64"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,{"inputs":[{"name":"atomicu64"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,{"inputs":[{"name":"atomicu64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"u64"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,{"inputs":[{"name":"atomicu64"},{"name":"u64"},{"name":"ordering"}],"output":{"name":"u64"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current value, returning the previous value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fmt","","",18,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"clone","","",31,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"fmt","","",32,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",33,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",33,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"clone","","",33,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"deref","","",34,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"next","","",37,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"next","","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"count","","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",38,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"fmt","","",39,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter::range","",41,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","","",41,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","","",41,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"fmt","core::iter::sources","",42,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",42,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",43,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",43,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",43,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",44,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",44,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"fmt","core::iter","",45,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",45,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"fmt","","",46,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",46,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"fmt","","",47,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",47,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"fmt","","",48,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",48,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",48,{"inputs":[{"name":"chain"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"fmt","","",49,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",49,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"fmt","","",50,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",50,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"fmt","","",51,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",51,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"fmt","","",52,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",52,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"fmt","","",53,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",53,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"nth","","",53,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",53,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",53,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",54,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",54,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",54,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",54,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",54,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"fmt","","",55,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",55,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"fmt","","",56,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",56,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"fmt","","",57,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",57,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",57,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",57,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",57,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",58,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",58,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",58,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"fmt","","",59,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",59,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"fmt","","",60,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",60,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",61,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",61,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",61,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",61,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",61,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",62,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",62,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"hash","core::option","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",63,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",63,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",63,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",63,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",63,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"fmt","","",64,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",65,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",66,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",68,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",69,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",69,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",69,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"fmt","","",70,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",71,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"count","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",73,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"fmt","","",74,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"count","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",74,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",75,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",76,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"fmt","","",77,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",77,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next","","",78,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next","","",79,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next","","",80,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",81,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"fmt","","",82,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",82,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",83,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"count","","",83,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",83,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",83,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",83,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",84,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"fmt","","",85,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",85,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",86,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"fmt","","",87,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"haystack","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",87,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"haystack","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",88,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"eq","core::str","",89,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",89,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",90,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",90,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",91,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",91,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"fmt","","",92,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",92,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",92,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"fmt","","",93,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",93,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",93,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"fmt","","",94,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",95,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"fmt","","",97,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",97,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",96,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",98,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",98,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",99,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",99,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"fmt","","",100,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",100,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"fmt","","",101,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",101,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",100,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"fmt","","",103,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",103,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",102,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",103,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",104,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",104,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"fmt","","",105,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"next","","",105,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","core::hash::sip","",107,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",107,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_hasher","","",108,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",108,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",110,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",111,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",111,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",112,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",112,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",113,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",113,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",114,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",114,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"partial_cmp","core::fmt","",115,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"option"}}],[11,"eq","","",115,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cmp","","",115,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",116,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",116,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",117,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",117,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",117,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",117,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",117,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",117,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",117,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",8,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",31,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[11,"explicit_sig_bits","bitflags::__core::num::dec2flt::rawfp","The number of bits in the singificand, *excluding* the hidden bit.",118,{"inputs":[],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",118,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",118,{"inputs":[],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",118,{"inputs":[],"output":{"name":"u64"}}],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",119,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",120,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",2,null],[13,"Infinite","","Positive or negative infinity",2,null],[13,"Zero","","Positive or negative zero",2,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",2,null],[13,"Normal","","A regular floating point number",2,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"prelude","bitflags::__core","The libcore prelude",null,null],[0,"v1","bitflags::__core::prelude","The core prelude",null,null],[8,"Fn","bitflags::__core::prelude::v1","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",121,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",122,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",124,null],[10,"next","","Advances the iterator and returns the next value.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",124,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",124,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",124,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",124,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",124,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",124,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",124,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",124,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",125,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",126,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",127,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",128,{"inputs":[],"output":{"name":"self"}}],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",129,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",130,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",131,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",131,null],[10,"into_iter","","Creates an iterator from a value.",131,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",132,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[5,"drop","","Disposes of a value.",null,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",133,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",133,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",134,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",135,null],[10,"call_once","","This is called when the call operator is used.",135,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",136,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",69,null],[13,"Err","","Contains the error value",69,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",137,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",137,null],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",63,null],[13,"Some","","Some value `T`",63,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",138,null],[10,"split_at","","",138,null],[10,"iter","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",138,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",138,null],[10,"as_ptr","","",138,null],[10,"binary_search","","",138,null],[10,"binary_search_by","","",138,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",138,null],[10,"split_at_mut","","",138,null],[10,"reverse","","",138,null],[10,"get_unchecked_mut","","",138,null],[10,"as_mut_ptr","","",138,null],[10,"contains","","",138,null],[10,"starts_with","","",138,null],[10,"ends_with","","",138,null],[10,"clone_from_slice","","",138,null],[10,"copy_from_slice","","",138,null],[10,"binary_search_by_key","","",138,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",139,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"nonzero","bitflags::__core","Exposes the NonZero lang item which provides optimization hints.",null,null],[8,"Zeroable","bitflags::__core::nonzero","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[3,"NonZero","","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",136,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",140,null],[10,"add","","The method for the `+` operator",140,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",141,null],[10,"sub","","The method for the `-` operator",141,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",142,null],[10,"mul","","The method for the `*` operator",142,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",143,null],[10,"div","","The method for the `/` operator",143,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",144,null],[10,"rem","","The method for the `%` operator",144,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",145,null],[10,"neg","","The method for the unary `-` operator",145,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",146,null],[10,"not","","The method for the unary `!` operator",146,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",147,null],[10,"bitand","","The method for the `&amp;` operator",147,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",148,null],[10,"bitor","","The method for the `|` operator",148,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",149,null],[10,"bitxor","","The method for the `^` operator",149,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",150,null],[10,"shl","","The method for the `&lt;&lt;` operator",150,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",151,null],[10,"shr","","The method for the `&gt;&gt;` operator",151,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",152,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",153,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",154,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",155,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",156,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",157,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",158,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",159,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",160,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",161,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",162,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",162,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",163,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",10,null],[12,"end","","The upper bound of the range (exclusive).",10,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",11,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",13,null],[12,"at","bitflags::__core::ops::RangeInclusive","",13,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",13,null],[12,"start","bitflags::__core::ops::RangeInclusive","",13,null],[12,"end","","",13,null],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",14,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",164,null],[10,"deref","","The method called to dereference a value",164,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",165,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",121,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",127,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",135,null],[10,"call_once","","This is called when the call operator is used.",135,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",166,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",167,null],[10,"make_place","","Creates a fresh place from `self`.",167,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",168,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",168,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",169,null],[16,"Place","","The place that will negotiate the storage of the data.",169,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",169,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",170,{"inputs":[],"output":{"name":"self"}}],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",133,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",133,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",15,null],[13,"Equal","","An ordering where a compared value is equal [to another].",15,null],[13,"Greater","","An ordering where a compared value is greater [than another].",15,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",134,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",123,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",137,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",137,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",128,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",130,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",125,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",129,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",122,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",171,null],[10,"try_into","","Performs the conversion.",171,{"inputs":[{"name":"tryinto"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",172,null],[10,"try_from","","Performs the conversion.",172,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"Borrow","bitflags::__core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",173,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",174,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",16,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"array","bitflags::__core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","bitflags::__core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",175,null],[10,"as_mut_slice","","Converts the array to mutable slice",175,null],[0,"sync","bitflags::__core","Synchronization primitives",null,null],[0,"atomic","bitflags::__core::sync","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",20,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",20,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",20,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",20,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",20,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",32,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",32,null],[13,"Unused","","There are no outstanding borrows on this cell.",32,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","bitflags::__core","Character manipulation.",null,null],[17,"MAX","bitflags::__core::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[0,"panicking","bitflags::__core","Panic support for libcore",null,null],[5,"panic","bitflags::__core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",124,null],[10,"next","","Advances the iterator and returns the next value.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",124,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",124,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",124,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",124,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",124,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",124,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",124,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",124,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",124,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",124,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",124,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",124,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",124,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",139,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",176,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",176,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",126,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",177,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",132,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",131,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",131,null],[10,"into_iter","","Creates an iterator from a value.",131,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",63,null],[13,"Some","","Some value `T`",63,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",67,null],[12,"len","","",67,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",68,null],[12,"vtable","","",68,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",178,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",69,null],[13,"Err","","Contains the error value",69,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","bitflags::__core","Slice management and manipulation",null,null],[8,"SliceExt","bitflags::__core::slice","Extension methods for slices.",null,null],[16,"Item","","",138,null],[10,"split_at","","",138,null],[10,"iter","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",138,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",138,null],[10,"as_ptr","","",138,null],[10,"binary_search","","",138,null],[10,"binary_search_by","","",138,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",138,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",138,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",138,null],[10,"split_at_mut","","",138,null],[10,"reverse","","",138,null],[10,"get_unchecked_mut","","",138,null],[10,"as_mut_ptr","","",138,null],[10,"contains","","",138,null],[10,"starts_with","","",138,null],[10,"ends_with","","",138,null],[10,"clone_from_slice","","",138,null],[10,"copy_from_slice","","",138,null],[10,"binary_search_by_key","","",138,{"inputs":[{"name":"sliceext"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"str","bitflags::__core","String manipulation",null,null],[0,"pattern","bitflags::__core::str","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",179,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",179,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",179,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",179,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",179,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",84,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",84,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",84,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",180,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",180,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",180,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",180,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",181,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",181,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",181,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","bitflags::__core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",182,null],[10,"from_str","","Parses a string `s` to return a value of this type.",182,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",106,null],[12,"next","","Index of the first byte of the next `char`",106,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",183,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",183,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",184,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",184,null],[11,"write_u8","","Write a single `u8` into this hasher",184,null],[11,"write_u16","","Write a single `u16` into this hasher.",184,null],[11,"write_u32","","Write a single `u32` into this hasher.",184,null],[11,"write_u64","","Write a single `u64` into this hasher.",184,null],[11,"write_usize","","Write a single `usize` into this hasher.",184,null],[11,"write_i8","","Write a single `i8` into this hasher.",184,null],[11,"write_i16","","Write a single `i16` into this hasher.",184,null],[11,"write_i32","","Write a single `i32` into this hasher.",184,null],[11,"write_i64","","Write a single `i64` into this hasher.",184,null],[11,"write_isize","","Write a single `isize` into this hasher.",184,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",185,null],[10,"build_hasher","","Creates a new hasher.",185,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings.",null,null],[4,"Alignment","bitflags::__core::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",109,null],[13,"Right","","Indication that contents should be right-aligned.",109,null],[13,"Center","","Indication that contents should be center-aligned.",109,null],[13,"Unknown","","No alignment was requested.",109,null],[6,"Result","","",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",186,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",186,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",186,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",187,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",188,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",189,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",190,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",191,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",192,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",193,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",194,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",195,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"RawFloat"],[8,"Zero"],[8,"One"],[8,"Fn"],[8,"From"],[8,"PartialOrd"],[8,"Iterator"],[8,"AsMut"],[8,"ExactSizeIterator"],[8,"FnMut"],[8,"Default"],[8,"Into"],[8,"AsRef"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"PartialEq"],[8,"Ord"],[8,"FnOnce"],[8,"Drop"],[8,"Clone"],[8,"SliceExt"],[8,"Extend"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"FixedSizeArray"],[8,"Step"],[8,"FromIterator"],[8,"Repr"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]]};
initSearch(searchIndex);
